<HTML>

<HEAD>

<TITLE>UNIX Unleashed unx07.htm</TITLE>

<LINK REL="ToC" HREF="index.htm" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/index.htm">

<LINK REL="Next" HREF="unx08.htm" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/unx08.htm">

<LINK REL="Previous" HREF="unx06.htm" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/unx06.htm"></HEAD>

<BODY TEXT="#000000" LINK="#0000FF" VLINK="#800080" bgcolor=white>

<P><A HREF="unx06.htm" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/unx06.htm"><IMG SRC="bluprev.gif" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/bluprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="index.htm" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/index.htm"><IMG SRC="blutoc.gif" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/blutoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="unx08.htm" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/unx08.htm"><IMG SRC="blunext.gif" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/blunext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>

<A HREF="index.htm" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/index.htm"><IMG SRC="bluprev.gif" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/bluprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Home"></A>

</P><UL>

<LI>

<A HREF="#I1">7 &#151; Text Editing with vi, EMACS, and sed</A></LI>

<UL>

<UL>

<UL>

<UL>

<LI>

<A HREF="#I2">By Dave Taylor</A></LI></UL></UL>

<LI>

<A HREF="#I3">The vi Editor</A></LI>

<UL>

<LI>

<A HREF="#I5">How to Start and Quit vi</A></LI>

<LI>

<A HREF="#I6">Simple Character Motion in vi</A></LI>

<LI>

<A HREF="#I7">Moving by Words and Pages</A></LI>

<LI>

<A HREF="#I8">Inserting Text into the File with i, a, o, and O</A></LI>

<LI>

<A HREF="#I9">Deleting Text</A></LI>

<LI>

<A HREF="#I10">Searching within a File</A></LI>

<LI>

<A HREF="#I11">How to Start vi Correctly</A></LI>

<LI>

<A HREF="#I12">The Key Colon Commands in vi</A></LI>

<LI>

<A HREF="#I13">Advanced vi Tricks, Tools, and Techniques</A></LI>

<LI>

<A HREF="#I14">The Change and Replace Commands</A></LI>

<LI>

<A HREF="#I15">Numeric Repeat Prefixes</A></LI>

<LI>

<A HREF="#I16">Numbering Lines in the File</A></LI>

<LI>

<A HREF="#I17">Search and Replace</A></LI>

<LI>

<A HREF="#I18">Key Mapping with the map Command</A></LI>

<LI>

<A HREF="#I19">Moving Sentences and Paragraphs</A></LI>

<LI>

<A HREF="#I20">Access UNIX with !</A></LI></UL>

<LI>

<A HREF="#I21">The EMACS Editor</A></LI>

<UL>

<LI>

<A HREF="#I22">Launching EMACS and Inserting Text</A></LI>

<LI>

<A HREF="#I23">How to Move Around in a File</A></LI>

<LI>

<A HREF="#I24">How to Delete Characters and Words</A></LI>

<LI>

<A HREF="#I25">Search and Replace in EMACS</A></LI>

<LI>

<A HREF="#I26">Using the EMACS Tutorial and Help System</A></LI>

<LI>

<A HREF="#I27">Working with Other Files</A></LI></UL>

<LI>

<A HREF="#I28">The sed Command</A></LI>

<UL>

<LI>

<A HREF="#I29">Changing Things En Route with sed</A></LI></UL></UL></UL></UL>



<H1 ALIGN="CENTER">

<CENTER><A ID="I1" NAME="I1">

<BR>

<FONT SIZE=5><B>7 &#151; Text Editing with </B><B>vi</B><B>, EMACS, and </B><B>sed</B>

<BR></FONT></A></CENTER></H1>

<H5 ALIGN="CENTER">

<CENTER><A ID="I2" NAME="I2">

<FONT SIZE=3><B>By Dave Taylor</B>

<BR></FONT></A></CENTER></H5>

<H3 ALIGN="CENTER">

<CENTER><A ID="I3" NAME="I3">

<FONT SIZE=4><A ID="I4" NAME="I4"></A><B>The </B><B>vi</B><B> Editor</B>

<BR></FONT></A></CENTER></H3>

<P>If you like primitive tools, you've already figured out that you can use a combination of &lt;&lt; and cat to add lines to a file, and you can use sed and file redirection to modify the contents of a file. These tools are rough and awkward, and when 
it's time to either create new files or modify existing ones, you need a screen-oriented editor. In UNIX, the screen editor of choice is called vi.

<BR></P>

<P>There are a number of editors that may be included with your UNIX system, including ed, ex, vi, and EMACS. The latter two use the entire screen, a big advantage, and both are powerful editors. This section focuses on vi, however, because it's easier 
and, perhaps more importantly, it's guaranteed to always be part of UNIX. Most vendors omit EMACS, forcing you to find it yourself.

<BR></P>

<P>In this section, you will learn how to start and quit vi, simple character motion in vi, how to move by words and pages, how to insert text into the file, how to search within a file, how to have vi start out right, the key colon commands in vi.

<BR></P>

<P>In some ways, an editor is like another operating system living within UNIX. If you're used to Windows or Macintosh editors, you'll be unhappy to find that vi doesn't know anything about your mouse. Once you spend some time working with vi, however, it 

will grow on you. By the end of this section, you will be able to create and modify files on your UNIX system to your heart's content.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I5" NAME="I5">

<FONT SIZE=3><B>How to Start and Quit </B><B>vi</B>

<BR></FONT></A></CENTER></H4>

<P>Most UNIX commands do their work, display their results, and quit. Among the few exceptions are more and pg, where you work within the specific program environment until you have viewed the entire contents of the file being shown, or until you quit. The 

vi editor is another program in this small category of environments, programs that you move in and use until you explicitly tell the program to quit.

<BR></P>

<P>Before you start vi for the first time, you must learn about two aspects of its behavior. The first is that vi is a modal editor. A mode is like an environment. Different modes in vi interpret the same key differently. For example, if you're in insert 
mode, pressing the A key adds an a to the text, whereas in command mode, pressing the A key enters a, a single key abbreviation for the append command. If you ever get confused about what mode you're in, press the Esc key on your keyboard. Pressing Esc 
always returns you to the command mode (and if you're already in command mode, it beeps to remind you of that fact).

<BR></P>

<HR ALIGN=CENTER>

<NOTE>

<IMG SRC="imp.gif" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/imp.gif" WIDTH = 68 HEIGHT = 35><B>TIP:</B> In vi, the Enter key is a specific command (meaning move to the beginning of the next line). As a result, you never need to press Enter to have vi process your command.

<BR></NOTE>

<HR ALIGN=CENTER>

<HR ALIGN=CENTER>

<NOTE>

<IMG SRC="note.gif" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/note.gif" WIDTH = 35 HEIGHT = 35><B>NOTE:</B> EMACS is a modeless editor. In EMACS, the A key always adds the letter a to the file. Commands in EMACS are all indicated by holding down the Ctrl key while pressing the command key; for example, 
Ctrl+C deletes a character.

<BR></NOTE>

<HR ALIGN=CENTER>

<P>The second important characteristic of vi is that it's a screen-oriented program. It must know what kind of terminal, computer, or system you're using to work with UNIX. This probably won't be a problem for you, because most systems are set up so that 
the default terminal type matches the terminal or communications program you're using. Here you will learn how to recognize when vi cannot figure out what terminal you're using, and what to do about it.

<BR></P>

<P>You can start vi in a number of different ways, and you will learn about lots of helpful alternatives later. Right now you will learn the basics. The vi command by itself starts the editor, ready for you to create a new file. The vi command with a 
filename starts vi with the specified file, so you can modify that file immediately.

<BR></P>

<P>To begin, enter vi at the prompt. If all is working well, the screen will clear, the first character on each line will become a tilde (~), and the cursor will be sitting at the top-left corner of the screen:

<BR></P>

<PRE>% vi

_

~

~

~

~

~

~

~

~

~

~</PRE>

<P>Type a colon character. Doing so moves the cursor to the bottom of the screen and replaces the last tilde with a colon:

<BR></P>

<PRE>~

~

~

~

~

~

~

~

:_</PRE>

<P>Press the q key and the Enter key, and you should be back at the shell prompt:

<BR></P>

<PRE>~

~

~

~

~

~

~

~

:q

%</PRE>

<P>If that operation worked without a problem, go ahead and append your command to your .login or .profile file. If the operation did not work, you received the unknown-terminal-type error message. You might see this on your screen:

<BR></P>

<PRE>% vi

&quot;unknown&quot;: Unknown terminal type

I don't know what type of terminal you are on. All I have is &quot;unknown&quot;

 [using open mode]

_</PRE>

<P>Alternatively, you might see this:

<BR></P>

<PRE>% vi

Visual needs addressible cursor or upline capability

:</PRE>

<P>Don't panic. You can fix this problem. The first step is to get back to the shell prompt. To do this, do exactly what you did in the first step: type :q and press Enter. You should then see this:

<BR></P>

<PRE>% vi

&quot;unknown&quot;: Unknown terminal type

I don't know what type of terminal you are on. All I have is &quot;unknown&quot;

 [using open mode]

:q

%</PRE>

<P>The problem here is that vi needs to know the type of terminal you're using, but it can't figure that out on its own. Therefore, you need to tell this to the operating system by setting the TERM environment variable. If you know what kind of terminal 
you have, use that value; otherwise, try the default of vt100:

<BR></P>

<PRE>% setenv TERM vt100</PRE>

<P>If you have the $ prompt, which means you're using the Bourne shell (sh) or Korn shell (ksh) rather than the C shell (csh), try this:

<BR></P>

<PRE>$ TERM=vt100 ; export TERM</PRE>

<P>Either way, you can now try entering vi again, and it should work. If it does work, append the command (whichever of these two commands was successful for you) to your .login file if you use csh, or to .profile if you use sh or ksh:

<BR></P>

<PRE>% echo &quot;setenv TERM vt100&quot; &gt;&gt; .login</PRE>

<P>or

<BR></P>

<PRE>$ echo &quot;TERM=vt100 ; export TERM&quot; &gt;&gt; .profile</PRE>

<P>This way, the next time you log in, the system will remember what kind of terminal you're using.

<BR></P>

<P>If this didn't work, it's time to talk with your system administrator about the problem or to call your UNIX vendor to find out what the specific value should be. If you are connected through a modem or other line, and you are actually using a terminal 

emulator or communications package, then you might also try using ansi as a TERM setting. If that fails, call the company that makes your software and ask them what terminal type the communications program is emulating.

<BR></P>

<P>Great! You have successfully launched vi, seen what it looks like, and even entered the most important command: the quit command. Now create a simple file and start vi so it shows you the contents of the file:

<BR></P>

<PRE>% ls -l &gt; demo

% vi demo

total 29

drwx&#151;&#151;&#151; 2 taylor        512 Nov 21 10:39 Archives/

drwx&#151;&#151;&#151;  3 taylor        512 Dec  3 02:03 InfoWorld/

drwx&#151;&#151;&#151;  2 taylor       1024 Dec  3 01:43 Mail/

drwx&#151;&#151;&#151;  2 taylor        512 Oct  6 09:36 News/

drwx&#151;&#151;&#151;  4 taylor        512 Dec  2 22:08 OWL/

-rw-rw&#151;&#151;  1 taylor        126 Dec  3 16:34 awkscript

-rw-rw&#151;&#151;  1 taylor        165 Dec  3 16:42 bigfiles

drwx&#151;&#151;&#151;  2 taylor        512 Oct 13 10:45 bin/

-rw-rw&#151;&#151;  1 taylor          0 Dec  3 22:26 demo

-rw-rw&#151;&#151;  1 taylor      12556 Nov 16 09:49 keylime.pie

-rw-rw&#151;&#151;  1 taylor       8729 Dec  2 21:19 owl.c

-rw-rw&#151;&#151;  1 taylor        199 Dec  3 16:11 sample

-rw-rw&#151;&#151;  1 taylor        207 Dec  3 16:11 sample2

drwx&#151;&#151;&#151;  2 taylor        512 Oct 13 10:45 src/

drwxrwx&#151;  2 taylor        512 Nov  8 22:20 temp/

-rw-rw&#151;&#151;  1 taylor        582 Nov 27 18:29 tetme

~

~

~

~

~

~

~

&quot;demo&quot; 17 lines, 846 characters</PRE>

<P>You can see that vi reads the file specified on the command line. In this example, my file is 17 lines long, but my screen can hold 25 lines. To show that some lines lack any text, vi uses the tilde on a line by itself. Finally, note that, at the 
bottom, the program shows the name of the file, the number of lines it found in the file, and the total number of characters.

<BR></P>

<P>Type :q again to quit vi and return to the command line for now. When you type the colon, the cursor will flash down to the bottom line and wait for the q, as it did before.

<BR></P>

<P>You have learned the most basic command in vi&#151;the :q command&#151;and survived the experience. It's all downhill from here.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I6" NAME="I6">

<FONT SIZE=3><B>Simple Character Motion in </B><B>vi</B>

<BR></FONT></A></CENTER></H4>

<P>Getting to a file isn't much good if you can't actually move around in it. Now you will learn how to use the cursor control keys in vi. To move left one character, press the h key. To move up, press the k key. To move down, press the j key. To move 
right a single character, use the l key. You can move left one character by pressing the Backspace key, and you can move to the beginning of the next line with the Enter key.

<BR></P>

<P>Launch vi again, specifying the demo file:

<BR></P>

<PRE>% vi demo

total 29

drwx&#151;&#151;&#151;  2 taylor        512 Nov 21 10:39 Archives/

drwx&#151;&#151;&#151;  3 taylor        512 Dec  3 02:03 InfoWorld/

drwx&#151;&#151;&#151;  2 taylor       1024 Dec  3 01:43 Mail/

drwx&#151;&#151;&#151;  2 taylor        512 Oct  6 09:36 News/

drwx&#151;&#151;&#151;  4 taylor        512 Dec  2 22:08 OWL/

-rw-rw&#151;&#151;  1 taylor        126 Dec  3 16:34 awkscript

-rw-rw&#151;&#151;  1 taylor        165 Dec  3 16:42 bigfiles

drwx&#151;&#151;&#151;  2 taylor        512 Oct 13 10:45 bin/

-rw-rw&#151;&#151;  1 taylor          0 Dec  3 22:26 demo

-rw-rw&#151;&#151;  1 taylor      12556 Nov 16 09:49 keylime.pie

-rw-rw&#151;&#151;  1 taylor       8729 Dec  2 21:19 owl.c

-rw-rw&#151;&#151;  1 taylor        199 Dec  3 16:11 sample

-rw-rw&#151;&#151;  1 taylor        207 Dec  3 16:11 sample2

drwx&#151;&#151;&#151;  2 taylor        512 Oct 13 10:45 src/

drwxrwx&#151;  2 taylor        512 Nov  8 22:20 temp/

-rw-rw&#151;&#151;  1 taylor        582 Nov 27 18:29 tetme

~

~

~

~

~

~

~

&quot;demo&quot; 17 lines, 846 characters</PRE>

<P>You should see the cursor sitting on top the t in total on the first line, or perhaps flashing underneath the t character. Perhaps you have a flashing box cursor or one that shows up in a different color. In any case, that's your starting spot in the 
file.

<BR></P>

<P>Press the h key once to try to move left. The cursor stays in the same spot and vi beeps to remind you that you can't move left any farther on the line. Try the k key to try to move up; the same thing will happen.

<BR></P>

<P>Now try pressing the j key to move down a character:

<BR></P>

<PRE>        total 29

drwx&#151;&#151;&#151;  2 taylor        512 Nov 21 10:39 Archives/

drwx&#151;&#151;&#151;  3 taylor        512 Dec  3 02:03 InfoWorld/

drwx&#151;&#151;&#151;  2 taylor       1024 Dec  3 01:43 Mail/</PRE>

<P>Now the cursor is on the d directory indicator on the second line of the file.

<BR></P>

<P>Press the k key to move back up to the original starting spot.

<BR></P>

<P>Using the four cursor control keys (h, j, k, and l), move around in the file for a little bit until you are comfortable with what's happening on the screen. Now try using the Backspace and Enter keys to see how they help you move around.

<BR></P>

<P>Move to the middle of a line:

<BR></P>

<PRE>total 29

drwx&#151;&#151;&#151;  2 taylor        512 Nov 21 10:39 Archives/

drwx&#151;&#151;&#151;  3 taylor        512 Dec  3 02:03 InfoWorld/

drwx&#151;&#151;&#151;  2 taylor       1024 Dec  3 01:43 Mail/</PRE>

<P>Here you're middle digit in the file size of the second file in the listing. Here are two new cursor motion keys: the 0 (zero) key moves the cursor to the beginning of the line, and $ moves it to the end of the line. First, press 0:

<BR></P>

<PRE>total 29

drwx&#151;&#151;&#151;  2 taylor        512 Nov 21 10:39 Archives/

drwx&#151;&#151;&#151;  3 taylor        512 Dec  3 02:03 InfoWorld/

drwx&#151;&#151;&#151;  2 taylor       1024 Dec  3 01:43 Mail/</PRE>

<P>Now press $ to move to the end of the line:

<BR></P>

<PRE>total 29

drwx&#151;&#151;&#151;  2 taylor        512 Nov 21 10:39 Archives/

drwx&#151;&#151;&#151;  3 taylor        512 Dec  3 02:03 InfoWorld/

drwx&#151;&#151;&#151;  2 taylor       1024 Dec  3 01:43 Mail/</PRE>

<P>If you have arrow keys on your keyboard, try using them to see if they work the same way the h, j, k, and l keys work. If the arrow keys don't move you around, they might have shifted you into insert mode. If you type characters and they're added to the 

file, you need to press the Esc key to return to command mode. Wrap this up by leaving this edit session. Because vi now knows that you have modified the file, it will try to ensure that you don't quit without saving the changes:

<BR></P>

<PRE>~

~

:q

No write since last change (:quit! overrides)</PRE>

<P>Use :q! (shorthand for :quit) to quit without saving the changes.

<BR></P>

<HR ALIGN=CENTER>

<NOTE>

<IMG SRC="note.gif" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/note.gif" WIDTH = 35 HEIGHT = 35><B>NOTE:</B> In general, if you try to use a colon command in vi and the program complains that it might do something bad, try the command again, followed by an exclamation point. This is like saying, &quot;Do it 

anyway!&quot;

<BR></NOTE>

<HR ALIGN=CENTER>

<P>Stay in this file for the next section if you'd like, or use :q to quit.

<BR></P>

<P>Moving about a file using these six simple key commands is, on a small scale, much like the entire process of using the vi editor when working with files. Stick with these simple commands until you're comfortable moving around, and you will be well on 
your way to becoming proficient with vi.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I7" NAME="I7">

<FONT SIZE=3><B>Moving by Words and Pages</B>

<BR></FONT></A></CENTER></H4>

<P>The description of the EMACS editor mentioned that because it's always in insert mode, all commands must include the Ctrl key. Well, it turns out that vi has its share of Ctrl+key commands, commands that require you to hold down the Ctrl key and press 
another key. In this section, you will learn about Ctrl+F, Ctrl+B, Ctrl+U, and Ctrl+D. These move you forward or backward a screen, and up or down half a screen of text, respectively.

<BR></P>

<P>Here are a few more commands: Ctrl+w moves you forward word by word, Ctrl+b moves you backward word by word, and the uppercase versions of these two commands have very similar, but not identical, functions.

<BR></P>

<P>To see how this works, you need to create a file that is larger than your screen. An easy way to do this is to save the output of a common command to a file over and over until the file is long enough. The system I use has lots of users, so I needed to 

use the who command just once. You might have to append the output of who to the big.output file a couple of times before the file is longer than 24 lines. (You can check by using wc, of course.)

<BR></P>

<PRE>% who &gt; big.output; wc -l big.output

40

% vi big.output

        leungtc  ttyrV   Dec  1 18:27   (magenta)

tuyinhwa ttyrX   Dec  3 22:38   (expert)

hollenst ttyrZ   Dec  3 22:14   (dov)

brandt   ttyrb   Nov 28 23:03   (age)

holmes   ttyrj   Dec  3 21:59   (age)

yuxi     ttyrn   Dec  1 14:19   (pc115)

frodo    ttyro   Dec  3 22:01   (mentor)

labeck   ttyrt   Dec  3 22:02   (dov)

chenlx2  ttyru   Dec  3 21:53   (mentor)

leungtc  ttys0   Nov 28 15:11   (gold)

chinese  ttys2   Dec  3 22:53   (excalibur)

cdemmert ttys5   Dec  3 23:00   (mentor)

yuenca   ttys6   Dec  3 23:00   (mentor)

janitor  ttys7   Dec  3 18:18   (age)

mathisbp ttys8   Dec  3 23:17   (dov)

janitor  ttys9   Dec  3 18:18   (age)

cs541    ttysC   Dec  2 15:16   (solaria)

yansong  ttysL   Dec  1 14:44   (math)

mdps     ttysO   Nov 30 19:39   (localhost)

md       ttysU   Dec  2 08:45   (muller)

jac      ttysa   Dec  3 18:18   (localhost)

eichsted ttysb   Dec  3 23:21   (pc1)

sweett   ttysc   Dec  3 22:40   (dov)

&quot;big.output&quot; 40 lines, 1659 characters</PRE>

<P>Because I have only a 25-line display and the output is 40 lines long (you can see that on the status line at the bottom), there is more information in this file than the screen can display at once.

<BR></P>

<P>To see the next screenful, hold down the Ctrl key, press the F key, and then let both go. In future, when I indicate Ctrl+F that's what I mean you should do.

<BR></P>

<PRE>eichsted ttysb   Dec  3 23:21   (pc1)

sweett   ttysc   Dec  3 22:40   (dov)

wellman  ttysd   Dec  3 23:01   (dov)

tuttleno ttyse   Dec  3 23:03   (indyvax)

wu       ttysf   Dec  3 23:10   (term01)

daurismj ttysg   Dec  3 23:10   (dov)

cs414    ttysh   Dec  3 23:12   (xds)

cq       ttysi   Dec  3 23:13   (expert)

cdemmert ttysk   Dec  3 22:37   (xsun22)

jrlee    ttysn   Dec  3 22:53   (mac1)

fitzgejs ttyso   Dec  3 23:18   (dov)

doerrhb  ttysp   Dec  3 23:20   (dov)

cdemmert ttysq   Dec  3 23:00   (xsun22)

frazierw ttysr   Dec  3 23:01   (dov)

buckeye  ttyss   Dec  3 23:20   (mac2)

mtaylor  ttyst   Dec  3 23:22   (dov)

look     ttysu   Dec  3 23:12   (age)

janitor  ttysw   Dec  3 18:29   (age)

ajones   ttysx   Dec  3 23:23   (rass)

~

~

~

~</PRE>

<P>Notice that the entire screen was rewritten, and that the familiar tilde characters have popped up again to indicate the end of the file.

<BR></P>

<P>By default, vi has a two-line overlap when you move from screen to screen. If you look carefully, you can see that both eichsted and sweett show up on both screens of data. This doesn't mean that they appear twice in the file; rather, vi is trying to 
help you not get lost while you wander through the file.

<BR></P>

<P>Now, what do you think will happen if you press Ctrl+U?

<BR></P>

<PRE>leungtc  ttys0   Nov 28 15:11   (gold)

chinese  ttys2   Dec  3 22:53   (excalibur)

cdemmert ttys5   Dec  3 23:00   (mentor)

yuenca   ttys6   Dec  3 23:00   (mentor)

janitor  ttys7   Dec  3 18:18   (age)

mathisbp ttys8   Dec  3 23:17   (dov)

janitor  ttys9   Dec  3 18:18   (age)

cs541    ttysC   Dec  2 15:16   (solaria)

yansong  ttysL   Dec  1 14:44   (math)

mdps     ttysO   Nov 30 19:39   (localhost)

md       ttysU   Dec  2 08:45   (muller)

jac      ttysa   Dec  3 18:18   (localhost)

eichsted ttysb   Dec  3 23:21   (pc1)

sweett   ttysc   Dec  3 22:40   (dov)

wellman  ttysd   Dec  3 23:01   (dov)

tuttleno ttyse   Dec  3 23:03   (indyvax)

wu       ttysf   Dec  3 23:10   (term01)

daurismj ttysg   Dec  3 23:10   (dov)

cs414    ttysh   Dec  3 23:12   (xds)

cq       ttysi   Dec  3 23:13   (expert)

cdemmert ttysk   Dec  3 22:37   (xsun22)

jrlee    ttysn   Dec  3 22:53   (mac1)

fitzgejs ttyso   Dec  3 23:18   (dov)</PRE>

<P>The command has moved you up half a screen. Notice where eichsted and sweett are now. Instead of the text being replaced at once, as when you used Ctrl+F, the text was scrolled downward a line at a time, each new line being added as the program went 
along. The Ctrl+U command might work either way&#151;one line or an entire screen at a time&#151;for you.

<BR></P>

<P>Now it's time to try moving around in this file word by word. Find the w key on your keyboard and press it once to see what happens.

<BR></P>

<PRE>leungtc  ttys0   Nov 28 15:11   (gold)

chinese  ttys2   Dec  3 22:53   (excalibur)

cdemmert ttys5   Dec  3 23:00   (mentor)</PRE>

<P>Now press w six times more, noting that the cursor stops three times in the field to indicate what time the user logged into the system (15:11 in this listing). Now your cursor should be sitting on the parenthesized field:

<BR></P>

<PRE>leungtc  ttys0   Nov 28 15:11   (gold)

chinese  ttys2   Dec  3 22:53   (excalibur)

cdemmert ttys5   Dec  3 23:00   (mentor)</PRE>

<P>It's time to move backward. Press b a few times; your cursor moves backward to the beginning of each word.

<BR></P>

<P>What happens if you try to move backward but you're already on the first word of the line, or you try to move forward but you're already on the last word?

<BR></P>

<P>Using the various keys you've learned, move back to the beginning of the line beginning with leungtc, which you used in the last exercise:

<BR></P>

<PRE>leungtc  ttys0   Nov 28 15:11   (gold)

chinese  ttys2   Dec  3 22:53   (excalibur)

cdemmert ttys5   Dec  3 23:00   (mentor)</PRE>

<P>This time press the uppercase letter W, rather than the lowercase w, to move through this line. Can you see the difference? Notice what happens when you hit the time field and the parenthesized words. Instead of pressing w seven times to move to the 
left parenthesis before gold, you can press W just five times.

<BR></P>

<P>Try moving backward using the B command. Notice that the B command differs from the b command the same way the W command differs from the w command.

<BR></P>

<P>Moving about forward and backward word by word, being able to move half screens or full screens at a time, and being able to zero in on specific spots with the h, j, k, and l cursor-motion keys give you quite a range of motion. Practice using these 
commands in various combinations to move your cursor to specific characters in your sample file.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I8" NAME="I8">

<FONT SIZE=3><B>Inserting Text into the File with </B><B>i</B><B>, </B><B>a</B><B>, </B><B>o</B><B>, and </B><B>O</B>

<BR></FONT></A></CENTER></H4>

<P>Being able to move around in a file is useful. The real function of an editor, however, is to enable you to easily add and remove&#151;in editor parlance, insert and delete&#151;information. The vi editor has a special insert mode, which you must use in 

order to add to the contents of the file. There are four different ways to shift into insert mode, and you will learn about all of them in this section.

<BR></P>

<P>The first way to switch to insert mode is to enter the letter i, which, mnemonically enough, inserts text into the file. The other commands that accomplish more or less the same thing are a, which appends text to the file; o, which opens up a line below 

the current line; and O, which opens up a line above the current line.

<BR></P>

<P>This time you want to start with a clean file, so quit from the big.output editing session and start vi again, this time specifying a nonexistent file called buckaroo:

<BR></P>

<PRE>% vi buckaroo

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

&quot;buckaroo&quot; [New file]</PRE>

<P>Notice that vi reminds you that this file doesn't exist; the bottom of the screen says New file instead of indicating the number of lines and characters.

<BR></P>

<P>Now it's time to try using insert mode. Press k once:

<BR></P>

<PRE>~

~

~

~</PRE>

<P>The system beeps at you because you haven't moved into insert mode yet, and k still has its command meaning of moving down a line (and of course, there isn't another line yet).

<BR></P>

<P>Press the i key to move into insert mode, and then press the k key again:

<BR></P>

<PRE><B>k_</B>

~

~

~</PRE>

<P>There you go! You've added a character to the file.

<BR></P>

<P>Press the Backspace key, which will move the cursor over the letter k:

<BR></P>

<PRE>k

~

~

~</PRE>

<P>Now see what happens when you press Esc to leave insert mode and return to the vi command mode:

<BR></P>

<PRE>~

~

~

~</PRE>

<P>Notice that the k vanished when you pressed Esc. That's because vi only saves text you've entered to the left of or above the cursor, not the letter the cursor is resting on.

<BR></P>

<P>Now move back into insert mode by pressing i and enter a few sentences from a favorite book of mine:

<BR></P>

<PRE>&quot;He's not even here,&quot; went the conservation.

&quot;Banzai.&quot;

&quot;Where is he?&quot;

&quot;At a hotpsial in El paso.&quot;

&quot;What? Why werent' we informed? What's wrong with him?&quot;_

~

~</PRE>

<HR ALIGN=CENTER>

<NOTE>

<IMG SRC="note.gif" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/note.gif" WIDTH = 35 HEIGHT = 35><B>NOTE:</B> Movie buffs will perhaps recognize that this text comes from the book Buckaroo Banzai. The film The Adventures of Buckaroo Banzai Across the Eighth Dimension is based on this very fun book.

<BR></NOTE>

<HR ALIGN=CENTER>

<P>I've deliberately left some typing errors in the text here. Fixing them will demonstrate some important features of the vi editor. If you fixed them as you went along, that's okay, and if you added errors of your own, that's okay, too!

<BR></P>

<P>Press Esc to leave insert mode. Press Esc a second time to ensure that it worked; remember that vi beeps to remind you that you're already in command mode.

<BR></P>

<P>Now use the cursor motion keys (h, j, k, and l) to move the cursor to any point on the first line:

<BR></P>

<PRE>&quot;He's not even here,&quot; went the conservation.

&quot;Banzai.&quot;

&quot;Where is he?&quot;

&quot;At the hotpsial in El paso.&quot;

&quot;What? Why werent' we informed? What's wrong with him?&quot;

~

~</PRE>

<P>It turns out that there's a line of dialogue missing between the line you're on and &quot;Banzai.&quot; One way to enter the line would be to move to the beginning of the line &quot;Banzai.&quot;, insert the new text, and press Enter before pressing Esc 

to quit insert mode. But vi has a special command&#151;o&#151;to open a line immediately below the current line for inserting text. Press o on your keyboard and follow along:

<BR></P>

<PRE>&quot;He's not even here,&quot; went the conservation.

_

&quot;Banzai.&quot;

&quot;Where is he?&quot;

&quot;At the hotpsial in El paso.&quot;

&quot;What? Why werent' we informed? What's wrong with him?&quot;

~

~</PRE>

<P>Now type the missing text:

<BR></P>

<PRE>&quot;He's not even here,&quot; went the conservation.

<B>&quot;Who?&quot;_</B>

&quot;Banzai.&quot;

&quot;Where is he?&quot;

&quot;At the hotpsial in El paso.&quot;

&quot;What? Why werent' we informed? What's wrong with him?&quot;

~

~</PRE>

<P>That's it. Press Esc to return to command mode.

<BR></P>

<P>The problem with the snippet of dialogue you're using is that there's no way to figure out who is talking. Adding a line above this dialogue helps identify the speakers. Again, use cursor motion keys to place the cursor on the top line:

<BR></P>

<PRE>&quot;He's not _even here,&quot; went the conservation.

&quot;Banzai.&quot;

&quot;Where is he?&quot;

&quot;At the hotpsial in El paso.&quot;

&quot;What? Why werent' we informed? What's wrong with him?&quot;

~

~</PRE>

<P>Now you face a dilemma. You want to open up a line for new text, but you want the line to be above the current line, not below it. It happens that vi can do that, too. Instead of using the o command, use its big brother O instead. When you press O, 
here's what you see:

<BR></P>

<PRE>_

&quot;He's not even here,&quot; went the conservation.

&quot;Banzai.&quot;

&quot;Where is he?&quot;

&quot;At the hotpsial in El paso.&quot;

&quot;What? Why werent' we informed? What's wrong with him?&quot;

~

~</PRE>

<P>Type the new sentence and press Esc.

<BR></P>

<PRE><B>I found myself stealing a peek at my own watch and overhead</B>

<B>General Catbird's </B>

<B>aide give him the latest._</B>

&quot;He's not even here,&quot; went the conservation.

&quot;Banzai.&quot;

&quot;Where is he?&quot;

&quot;At the hotpsial in El paso.&quot;

&quot;What? Why werent' we informed? What's wrong with him?&quot;

~

~</PRE>

<P>Now the dialogue makes a bit more sense. The conversation, overheard by the narrator, takes place between the general and his aide.

<BR></P>

<P>There are a few words missing in one of the lines, so the next task is to insert them. Use the cursor keys to move the cursor to the fifth line, just after the word &quot;Where&quot;:

<BR></P>

<PRE>I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conservation.

&quot;Banzai.&quot;

&quot;Where_is he?&quot;

&quot;At the hotpsial in El paso.&quot;

&quot;What? Why werent' we informed? What's wrong with him?&quot;

~

~</PRE>

<P>At this juncture, you need to add the words &quot;the hell&quot; to make the sentence a bit stronger (and correct). You can use i to insert the text, but then you end up with a trailing space. Instead, you can add text immediately after the current 
cursor location by using the a key to append the information. When you press <I>a</I>, the cursor moves one character to the right:

<BR></P>

<PRE>I found myself stealing a peek at my own watch and overhead

General Catbird's 

aide give him the latest.

&quot;He's not even here,&quot; went the conservation.

&quot;Banzai.&quot;

&quot;Where is he?&quot;

&quot;At the hotpsial in El paso.&quot;

&quot;What? Why werent' we informed? What's wrong with him?&quot;

~

~</PRE>

<P>Here's where vi can be difficult to use. You're in insert mode, but there's no way for you to know that. When you type the letters you want to add, the screen shows that they are appended. But what if you think you're in insert mode when you're actually 

in command mode? One trick you could use to ensure you're in insert mode is to press the command key a second time. If the letter &quot;a&quot; shows up in the text, simply backspace over it; now you know that you're in append mode. When you're done 
entering the new characters, and you're still in append mode, here's what your screen looks like:

<BR></P>

<PRE>I found myself stealing a peek at my own watch and overhead

General Catbird's 

aide give him the latest.

&quot;He's not even here,&quot; went the conservation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hotpsial in El paso.&quot;

&quot;What? Why werent' we informed? What's wrong with him?&quot;

~

~</PRE>

<P>Notice that the cursor stayed on the &quot;i&quot; in &quot;is&quot; throughout this operation. Press Esc to return to command mode. Notice that the cursor finally hops off the &quot;i&quot; and moves left one character.

<BR></P>

<P>To differentiate between the i and a commands, remember that the insert command always adds the new information immediately before the cursor, whereas append adds the information immediately after the cursor.

<BR></P>

<P>With this in mind, try to fix the apostrophe problem in the word &quot;werent'&quot; on the last line. Move the cursor to the &quot;n&quot; in that word:

<BR></P>

<PRE>&quot;Where the hell is he?&quot;

&quot;At the hotpsial in El paso.&quot;

&quot;What? Why werent' we informed? What's wrong with him?&quot;

~</PRE>

<P>Now, to put the apostrophe immediately after the current character, do you want to use the insert command (i) or the append  command? If you said &quot;Append,&quot; give yourself a pat on the back! Press a to append the apostrophe:

<BR></P>

<PRE>&quot;Where the hell is he?&quot;

&quot;At the hotpsial in El paso.&quot;

&quot;What? Why werent' we informed? What's wrong with him?&quot;

~</PRE>

<P>Press the ' key once and press Esc.

<BR></P>

<P>Quit vi. Use :q, and the program reminds you that you haven't saved your changes to this new file:

<BR></P>

<PRE>~

~

No write since last change (:quit! overrides)</PRE>

<P>To write the changes, you need a new command, so I'll give you a preview of a set of colon commands you will learn later in this chapter. Type : (the colon character), which moves the cursor to the bottom of the screen.

<BR></P>

<PRE>~

~

:_</PRE>

<P>Now press w to write out the file, and then press the Enter key:

<BR></P>

<PRE>~

~

&quot;buckaroo&quot; 8 lines, 271 characters</PRE>

<P>It's okay to leave vi now. Use :q to quit and you're safely back at the command prompt. A quick cat confirms that the tildes were not included in the file itself:

<BR></P>

<PRE>%

% <B>cat buckaroo</B>

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conservation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hotpsial in El paso.&quot;

&quot;What? Why weren't' we informed? What's wrong with him?&quot;

%</PRE>

<P>As you can tell, the vi editor is quite powerful, and it has a plethora of commands. Just moving about and inserting text, you have learned 24 commands, as summarized in Table 7.1.

<BR></P>

<UL>

<LH><B>Table 7.1. Summary of </B><B>vi</B><B> motion and insertion commands.</B>

<BR></LH></UL>

<TABLE BORDER>

<TR>

<TD>

<PRE><I>Command</I>

<BR></PRE>

<TD>

<PRE><I>Meaning</I>

<BR></PRE>

<TR>

<TD>

<P>0</P>

<TD>

<P>Move to beginning of line.</P>

<TR>

<TD>

<P>$</P>

<TD>

<P>Move to end of line.</P>

<TR>

<TD>

<P>a</P>

<TD>

<P>Append text&#151;move into insert mode after the current character.</P>

<TR>

<TD>

<P>^b</P>

<TD>

<P>Back up one screen of text.</P>

<TR>

<TD>

<P>B</P>

<TD>

<P>Back up one space-delimited word.</P>

<TR>

<TD>

<P>b</P>

<TD>

<P>Back up one word.</P>

<TR>

<TD>

<P>Backspace</P>

<TD>

<P>Move left one character.</P>

<TR>

<TD>

<P>^d</P>

<TD>

<P>Move down half a page.</P>

<TR>

<TD>

<P>Esc</P>

<TD>

<P>Leave insert mode, return to command mode.</P>

<TR>

<TD>

<P>^f</P>

<TD>

<P>Move forward one screen of text.</P>

<TR>

<TD>

<P>h</P>

<TD>

<P>Move left one character.</P>

<TR>

<TD>

<P>i</P>

<TD>

<P>Insert text&#151;move into insert mode before the current character.</P>

<TR>

<TD>

<P>j</P>

<TD>

<P>Move down one line.</P>

<TR>

<TD>

<P>k</P>

<TD>

<P>Move up one line.</P>

<TR>

<TD>

<P>l</P>

<TD>

<P>Move right one character.</P>

<TR>

<TD>

<P>O</P>

<TD>

<P>Open new line for insert above the current line.</P>

<TR>

<TD>

<P>o</P>

<TD>

<P>Open new line for insert below the current line.</P>

<TR>

<TD>

<P>Enter</P>

<TD>

<P>Move to beginning of next line.</P>

<TR>

<TD>

<P>^u</P>

<TD>

<P>Move up half a page.</P>

<TR>

<TD>

<P>W</P>

<TD>

<P>Move forward one space-delimited word.</P>

<TR>

<TD>

<P>w</P>

<TD>

<P>Move forward one word.</P>

<TR>

<TD>

<P>:w</P>

<TD>

<P>Write the edit buffer to the system.</P>

<TR>

<TD>

<P>:q</P>

<TD>

<P>Quit vi and return to the UNIX prompt.</P>

<TR>

<TD>

<P>:q!</P>

<TD>

<P>Quit vi and return to the system, throwing away any changes made to the file.</P></TABLE>

<HR ALIGN=CENTER>

<NOTE>

<IMG SRC="warning.gif" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/warning.gif" WIDTH = 37 HEIGHT = 35><B>WARNING:</B> In this table, I've introduced a simple shorthand notation that's worth explaining. UNIX users often use a caret followed by a character instead of the awkward Ctrl+c notation. Therefore, ^f has 

the same meaning as Ctrl+F. Expressing this operation as ^f does not change the way it's performed: you'd still press and hold down the Ctrl key and then press the lowercase F key. It's just a shorter notation.

<BR></NOTE>

<HR ALIGN=CENTER>

<P>You've already learned quite a few commands, but you've barely scratched the surface of the powerful vi command!

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I9" NAME="I9">

<FONT SIZE=3><B>Deleting Text</B>

<BR></FONT></A></CENTER></H4>

<P>You now have many of the pieces you need to work efficiently with the vi editor, to zip to any point in the file, or to add text wherever you like. Now you need to learn how to delete characters, words, and lines.

<BR></P>

<P>The simplest form of the delete command is the x command, which functions as though you are writing an X over a letter you don't want on a printed page: it deletes the character under the cursor. Press x five times and you delete five characters. 
Deleting a line of text this way can be quite tedious, so vi has some alternate commands. (Are you surprised?) One command that many vi users don't know about is the D, or delete through end of line, command. Wherever you are on a line, pressing D 
immediately deletes everything after the cursor to the end of that line of text.

<BR></P>

<P>If there's an uppercase D command, you can just bet there's a lowercase d command too. The d command is the first of a set of more sophisticated vi commands, which are followed by a second command that indicates what you'd like to do with the command. 
You already know that w and W move you forward a word in the file; they're known as addressing commands in vi. You can follow d with one of these addressing commands to specify what you would like to delete. For example, to delete a line, simply press dd.

<BR></P>

<P>Sometimes you might get a bit overzealous and delete more than you anticipated. That's not a problem&#151;well, not too much of a problem&#151;because vi remembers the state of the file prior to the most recent action taken. To undo a deletion (or 
insertion, for that matter), use the u command. To undo a line of changes, use the U command. Be aware that once you've moved off the line in question, the U command is unable to restore it!

<BR></P>

<P>Start vi again with the big.output file you used earlier:

<BR></P>

<PRE>leungtc  ttyrV   Dec  1 18:27   (magenta)

tuyinhwa ttyrX   Dec  3 22:38   (expert)

hollenst ttyrZ   Dec  3 22:14   (dov)

brandt   ttyrb   Nov 28 23:03   (age)

holmes   ttyrj   Dec  3 21:59   (age)

yuxi     ttyrn   Dec  1 14:19   (pc)

frodo    ttyro   Dec  3 22:01   (mentor)

labeck   ttyrt   Dec  3 22:02   (dov)

chenlx2  ttyru   Dec  3 21:53   (mentor)

leungtc  ttys0   Nov 28 15:11   (gold)

chinese  ttys2   Dec  3 22:53   (excalibur)

cdemmert ttys5   Dec  3 23:00   (mentor)

yuenca   ttys6   Dec  3 23:00   (mentor)

janitor  ttys7   Dec  3 18:18   (age)

mathisbp ttys8   Dec  3 23:17   (dov)

janitor  ttys9   Dec  3 18:18   (age)

cs541    ttysC   Dec  2 15:16   (solaria)

yansong  ttysL   Dec  1 14:44   (math)

mdps     ttysO   Nov 30 19:39   (localhost)

md       ttysU   Dec  2 08:45   (muller)

jac      ttysa   Dec  3 18:18   (localhost)

eichsted ttysb   Dec  3 23:21   (pc1)

sweett   ttysc   Dec  3 22:40   (dov)

&quot;big.output&quot; 40 lines, 1659 characters</PRE>

<P>Press the x key a few times to delete a few characters from the beginning of the file:

<BR></P>

<PRE>gtc  ttyrV   Dec  1 18:27   (magenta)

tuyinhwa ttyrX   Dec  3 22:38   (expert)

hollenst ttyrZ   Dec  3 22:14   (dov)

brandt   ttyrb   Nov 28 23:03   (age)

holmes   ttyrj   Dec  3 21:59   (age)</PRE>

<P>Now press u to undo the last deletion:

<BR></P>

<PRE>ngtc  ttyrV   Dec  1 18:27   (magenta)

tuyinhwa ttyrX   Dec  3 22:38   (expert)

hollenst ttyrZ   Dec  3 22:14   (dov)

brandt   ttyrb   Nov 28 23:03   (age)

holmes   ttyrj   Dec  3 21:59   (age)</PRE>

<P>If you press u again, what do you think will happen?

<BR></P>

<PRE>gtc  ttyrV   Dec  1 18:27   (magenta)

tuyinhwa ttyrX   Dec  3 22:38   (expert)

hollenst ttyrZ   Dec  3 22:14   (dov)

brandt   ttyrb   Nov 28 23:03   (age)

holmes   ttyrj   Dec  3 21:59   (age)</PRE>

<P>The undo command alternates between the last command having happened or not having happened. To explain it a bit better, the undo command is an action unto itself, so the second time you press u, you're undoing the undo command that you just requested. 

Press the u key a few more times if you need to convince yourself that this is the case.

<BR></P>

<P>It's time to make some bigger changes to the file. Press dw twice to delete the current word and the next word in the file. It should look something like this after the first dw:

<BR></P>

<PRE>ttyrV   Dec  1 18:27   (magenta)

tuyinhwa ttyrX   Dec  3 22:38   (expert)

hollenst ttyrZ   Dec  3 22:14   (dov)

brandt   ttyrb   Nov 28 23:03   (age)

holmes   ttyrj   Dec  3 21:59   (age)</PRE>

<P>Then it should look like this after the second dw:

<BR></P>

<PRE>Dec  1 18:27   (magenta)

tuyinhwa ttyrX   Dec  3 22:38   (expert)

hollenst ttyrZ   Dec  3 22:14   (dov)

brandt   ttyrb   Nov 28 23:03   (age)

holmes   ttyrj   Dec  3 21:59   (age)</PRE>

<P>Press u. You see that you can only undo the most recent command. At this point, though, because you haven't moved from the line you're editing, the U, or undo a line of changes, command will restore the line to its original splendor:

<BR></P>

<PRE>leungtc  ttyrV   Dec  1 18:27   (magenta)

tuyinhwa ttyrX   Dec  3 22:38   (expert)

hollenst ttyrZ   Dec  3 22:14   (dov)

brandt   ttyrb   Nov 28 23:03   (age)

holmes   ttyrj   Dec  3 21:59   (age)</PRE>

<P>Well, in the end, you really don't want to see some of these folk. Fortunately, you can delete lines with the dd command. What if I want to delete the entries for chinese and janitor, both of which are visible on this screen?

<BR></P>

<P>The first step is to use the cursor keys to move down to any place on the line for the chinese account, about halfway down the screen:

<BR></P>

<PRE>chenlx2  ttyru   Dec  3 21:53   (mentor)

leungtc  ttys0   Nov 28 15:11   (gold)

chinese  ttys2   Dec  3 22:53   (excalibur)

cdemmert ttys5   Dec  3 23:00   (mentor)

yuenca   ttys6   Dec  3 23:00   (mentor)

janitor  ttys7   Dec  3 18:18   (age)

mathisbp ttys8   Dec  3 23:17   (dov)</PRE>

<P>If your cursor isn't somewhere in the middle of this line, move it so that you too are not at an edge.

<BR></P>

<P>Instead of removing this line completely, perhaps you'd rather just remove the date, time, and name of the system (in parentheses) instead. To accomplish this, you don't need to press dw a bunch of times, or even x a lot of times, but rather just D to 
delete through the end of the line:

<BR></P>

<PRE>chenlx2  ttyru   Dec  3 21:53   (mentor)

leungtc  ttys0   Nov 28 15:11   (gold)

chinese  ttys2  _

cdemmert ttys5   Dec  3 23:00   (mentor)

yuenca   ttys6   Dec  3 23:00   (mentor)

janitor  ttys7   Dec  3 18:18   (age)

mathisbp ttys8   Dec  3 23:17   (dov)</PRE>

<P>Oh, that's not quite what you wanted to do. No problem, the undo command can fix it. Simply pressing the u key restores the text you deleted:

<BR></P>

<PRE>chenlx2  ttyru   Dec  3 21:53   (mentor)

leungtc  ttys0   Nov 28 15:11   (gold)

chinese  ttys2   Dec  3 22:53   (excalibur)

cdemmert ttys5   Dec  3 23:00   (mentor)

yuenca   ttys6   Dec  3 23:00   (mentor)

janitor  ttys7   Dec  3 18:18   (age)

mathisbp ttys8   Dec  3 23:17   (dov)</PRE>

<P>The problem is that you used the wrong command to delete the two entries chinese and janitor from the file. Instead of using the D command, you should use dd. Pressing dd once has these results:

<BR></P>

<PRE>Dec  1 18:27    (magenta)

tuyinhwa ttyrX   Dec  3 22:38   (expert)

hollenst ttyrZ   Dec  3 22:14   (dov)

brandt   ttyrb   Nov 28 23:03   (age)

holmes   ttyrj   Dec  3 21:59   (age)

yuxi     ttyrn   Dec  1 14:19   (pc)

frodo    ttyro   Dec  3 22:01   (mentor)

labeck   ttyrt   Dec  3 22:02   (dov)

chenlx2  ttyru   Dec  3 21:53   (mentor)

leungtc  ttys0   Nov 28 15:11   (gold)

cdemmert ttys5   Dec  3 23:00   (mentor)

yuenca   ttys6   Dec  3 23:00   (mentor)

janitor  ttys7   Dec  3 18:18   (age)

mathisbp ttys8   Dec  3 23:17   (dov)

janitor  ttys9   Dec  3 18:18   (age)

cs541    ttysC   Dec  2 15:16   (solaria)

yansong  ttysL   Dec  1 14:44   (math)

mdps     ttysO   Nov 30 19:39   (localhost)

md       ttysU   Dec  2 08:45   (muller)

jac      ttysa   Dec  3 18:18   (localhost)

eichsted ttysb   Dec  3 23:21   (pc1)

sweett   ttysc   Dec  3 22:40   (dov)

wellman  ttysd   Dec  3 23:01   (dov)</PRE>

<P>Notice that a new line of information has been pulled onto the screen at the bottom to replace the blank line that you removed. If you try using the u command now, what happens? You're almost done. A few presses of the Enter key and you're down to the 
entry for the janitor account. Using dd removes that line too:

<BR></P>

<PRE>Dec  1 18:27    (magenta)

tuyinhwa ttyrX   Dec  3 22:38   (expert)

hollenst ttyrZ   Dec  3 22:14   (dov)

brandt   ttyrb   Nov 28 23:03   (age)

holmes   ttyrj   Dec  3 21:59   (age)

yuxi     ttyrn   Dec  1 14:19   (pc)

frodo    ttyro   Dec  3 22:01   (mentor)

labeck   ttyrt   Dec  3 22:02   (dov)

chenlx2  ttyru   Dec  3 21:53   (mentor)

leungtc  ttys0   Nov 28 15:11   (gold)

cdemmert ttys5   Dec  3 23:00   (mentor)

yuenca   ttys6   Dec  3 23:00   (mentor)

mathisbp ttys8   Dec  3 23:17   (dov)

janitor  ttys9   Dec  3 18:18   (age)

cs541    ttysC   Dec  2 15:16   (solaria)

yansong  ttysL   Dec  1 14:44   (math)

mdps     ttysO   Nov 30 19:39   (localhost)

md       ttysU   Dec  2 08:45   (muller)

jac      ttysa   Dec  3 18:18   (localhost)

eichsted ttysb   Dec  3 23:21   (pc1)

sweett   ttysc   Dec  3 22:40   (dov)

wellman  ttysd   Dec  3 23:01   (dov)

tuttleno ttyse   Dec  3 23:03   (indyvax)</PRE>

<P>Each line below the one deleted moves up a line to fill in the blank space, and a new line, for tuttleno, moves up from the following screen.

<BR></P>

<P>Now you want to return to the buckaroo file to remedy some of the horrendous typographic errors! It doesn't matter whether you save the changes you've just made to the file, so use :q! to quit, discarding these edit changes to the big.output file. 
Entering vi buckaroo starts vi again:

<BR></P>

<PRE>I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conservation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hotpsial in El paso.&quot;

&quot;What? Why weren't' we informed? What's wrong with him?&quot;

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

&quot;buckaroo&quot; 8 lines, 271 characters</PRE>

<P>There are a few fixes you can make in short order. The first is to change &quot;conservation&quot; to &quot;conversation&quot; on the third line. To move there, press the Return key twice and then use W to zip forward until the cursor is at the first 
letter of the word you're editing:

<BR></P>

<PRE>I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conservation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;</PRE>

<P>Then use the dw command:

<BR></P>

<PRE>I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the .

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;</PRE>

<P>Now enter insert mode by pressing i and type in the correct spelling of the word &quot;conversation.&quot; Then press Esc:

<BR></P>

<PRE>I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;</PRE>

<P>That's one fix. Now move down a few lines to fix the atrocious misspelling of &quot;hospital&quot;:

<BR></P>

<PRE>&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hotpsial in El paso.&quot;

&quot;What? Why weren't' we informed? What's wrong with him?&quot;

~</PRE>

<P>Again, use dw to delete the word, then i to enter insert mode. Type &quot;hospital&quot; and press Esc, and all is well on the line:

<BR></P>

<PRE>&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El paso.&quot;

&quot;What? Why weren't' we informed? What's wrong with him?&quot;

~</PRE>

<P>Well, almost all is well. The first letter of &quot;Paso&quot; needs to be capitalized. Move to it by pressing w:

<BR></P>

<PRE>&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El paso.&quot;

&quot;What? Why weren't' we informed? What's wrong with him?&quot;

~</PRE>

<P>It's time for a secret vi expert command! Instead of pressing x to delete the letter, i to enter insert mode, P as the correct letter, and Esc to return to command mode, there's a much faster way to transpose case: the ~ command. Press the ~ character 
once, and here's what happens:

<BR></P>

<PRE>&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't' we informed? What's wrong with him?&quot;

~</PRE>

<P>Cool, isn't it? Back up to the beginning of the word again, using the h command, and press ~ a few times to see what happens. Notice that each time you press ~, the character's case switches (transposes) and the cursor moves to the next character. Press 

~ four times and you should end up with this:

<BR></P>

<PRE>&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El pASO.&quot;

&quot;What? Why weren't' we informed? What's wrong with him?&quot;

~</PRE>

<P>Back up to the beginning of the word and press ~ four more times until the word is correct.

<BR></P>

<P>One more slight change and the file is fixed! Move to the last line of the file, to the extra apostrophe in the word &quot;weren't',&quot; and use the x key to delete the offending character. The screen should now look like this:

<BR></P>

<PRE>I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~</PRE>

<P>That looks great! It's time to save it for posterity. Use :wq, a shortcut that has vi write out the changes, and then immediately quit the program:

<BR></P>

<PRE>~

~

~

&quot;buckaroo&quot; 8 lines, 270 characters

%</PRE>

<P>Not only have you learned about the variety of deletion options in vi, but you have also learned a few simple shortcut commands: ~, which transposes case, and :wq, which writes out the changes and quits the program all in one step.

<BR></P>

<P>You should feel pleased; you're now a productive and knowledgeable vi user, and you can modify files, making easy or tough changes. Go back to your system and experiment further, modifying some of the other files. Be careful, though, not to make changes 

in any of your dot files (for example, .cshrc), lest you cause trouble that would be difficult to fix!

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I10" NAME="I10">

<FONT SIZE=3><B>Searching within a File</B>

<BR></FONT></A></CENTER></H4>

<P>With the addition of two more capabilities, you'll be ready to face down any vi expert, demonstrating your skill and knowledge of the editor. Much more importantly, you'll be able to really fly through files, moving immediately to the information you 
desire.

<BR></P>

<P>The two new capabilities are for finding specific words or phrases in a file and for moving to specific lines in a file. Similar to searching for patterns in more and page, /<I>pattern</I> searches forward in the file for a specified pattern, and 
?<I>pattern</I> searches backward for the specified pattern. To repeat the previous search, use the n command to tell vi to search again, in the same direction, for the same pattern.

<BR></P>

<P>You can easily move to any specific line in a file using the G, or go to line, command. If you press a number before you press G, the cursor will move to that line in the file. If you press G without a line number, the cursor will zip you to the very 
last line of the file by default.

<BR></P>

<P>Start vi again with the big.output file:

<BR></P>

<PRE>leungtc  ttyrV   Dec  1 18:27   (magenta)

tuyinhwa ttyrX   Dec  3 22:38   (expert)

hollenst ttyrZ   Dec  3 22:14   (dov)

brandt   ttyrb   Nov 28 23:03   (age)

holmes   ttyrj   Dec  3 21:59   (age)

yuxi     ttyrn   Dec  1 14:19   (pc)

frodo    ttyro   Dec  3 22:01   (mentor)

labeck   ttyrt   Dec  3 22:02   (dov)

chenlx2  ttyru   Dec  3 21:53   (mentor)

leungtc  ttys0   Nov 28 15:11   (gold)

chinese  ttys2   Dec  3 22:53   (excalibur)

cdemmert ttys5   Dec  3 23:00   (mentor)

yuenca   ttys6   Dec  3 23:00   (mentor)

janitor  ttys7   Dec  3 18:18   (age)

mathisbp ttys8   Dec  3 23:17   (dov)

janitor  ttys9   Dec  3 18:18   (age)

cs541    ttysC   Dec  2 15:16   (solaria)

yansong  ttysL   Dec  1 14:44   (math)

mdps     ttysO   Nov 30 19:39   (localhost)

md       ttysU   Dec  2 08:45   (muller)

jac      ttysa   Dec  3 18:18   (localhost)

eichsted ttysb   Dec  3 23:21   (pc1)

sweett   ttysc   Dec  3 22:40   (dov)

&quot;big.output&quot; 40 lines, 1659 characters</PRE>

<P>Remember that you used :q! to quit earlier, so your changes were not retained.

<BR></P>

<P>To move to the very last line of the file, press G once:

<BR></P>

<PRE>cdemmert ttysk   Dec  3 22:37   (xsun)

jrlee    ttysn   Dec  3 22:53   (mac1)

fitzgejs ttyso   Dec  3 23:18   (dov)

doerrhb  ttysp   Dec  3 23:20   (dov)

cdemmert ttysq   Dec  3 23:00   (xsun)

frazierw ttysr   Dec  3 23:01   (dov)

buckeye  ttyss   Dec  3 23:20   (mac2)

mtaylor  ttyst   Dec  3 23:22   (dov)

look     ttysu   Dec  3 23:12   (age)

janitor  ttysw   Dec  3 18:29   (age)

ajones   ttysx   Dec  3 23:23   (rassilon)

~

~

~

~

~

~

~

~

~

~

~

~</PRE>

<P>To move to the third line of the file, press 3 followed by G:

<BR></P>

<PRE>leungtc  ttyrV   Dec  1 18:27   (magenta)

tuyinhwa ttyrX   Dec  3 22:38   (expert)

hollenst ttyrZ   Dec  3 22:14   (dov)

brandt   ttyrb   Nov 28 23:03   (age)

holmes   ttyrj   Dec  3 21:59   (age)

yuxi     ttyrn   Dec  1 14:19   (pc)

frodo    ttyro   Dec  3 22:01   (mentor)

labeck   ttyrt   Dec  3 22:02   (dov)

chenlx2  ttyru   Dec  3 21:53   (mentor)

leungtc  ttys0   Nov 28 15:11   (gold)

chinese  ttys2   Dec  3 22:53   (excalibur)

cdemmert ttys5   Dec  3 23:00   (mentor)

yuenca   ttys6   Dec  3 23:00   (mentor)

janitor  ttys7   Dec  3 18:18   (age)

mathisbp ttys8   Dec  3 23:17   (dov)

janitor  ttys9   Dec  3 18:18   (age)

cs541    ttysC   Dec  2 15:16   (solaria)

yansong  ttysL   Dec  1 14:44   (math)

mdps     ttysO   Nov 30 19:39   (localhost)

md       ttysU   Dec  2 08:45   (muller)

jac      ttysa   Dec  3 18:18   (localhost)

eichsted ttysb   Dec  3 23:21   (pc1)

sweett   ttysc   Dec  3 22:40   (dov)</PRE>

<P>Notice that the cursor is on the third line of the file.

<BR></P>

<P>Now it's time to search. From your previous travels in this file, you know that the very last line is for the account ajones, but instead of using G to move there directly, you can search for the specified pattern by using the / search command.

<BR></P>

<P>Pressing / immediately moves the cursor to the bottom of the screen:

<BR></P>

<PRE>md       ttysU   Dec  2 08:45   (mueller)

jac      ttysa   Dec  3 18:18   (localhost)

eichsted ttysb   Dec  3 23:21   (pc1)

sweett   ttysc   Dec  3 22:40   (dov)

/_</PRE>

<P>Now you can type in the pattern <I>ajones</I>:

<BR></P>

<PRE>md       ttysU   Dec  2 08:45   (mueller)

jac      ttysa   Dec  3 18:18   (localhost)

eichsted ttysb   Dec  3 23:21   (pc1)

sweett   ttysc   Dec  3 22:40   (dov)

/ajones_</PRE>

<P>When you press Return, vi spins through the file and moves you to the first line it finds that contains the specified pattern:

<BR></P>

<PRE>cdemmert ttysk   Dec  3 22:37   (xsun)

jrlee    ttysn   Dec  3 22:53   (mac1)

fitzgejs ttyso   Dec  3 23:18   (dov)

doerrhb  ttysp   Dec  3 23:20   (dov)

cdemmert ttysq   Dec  3 23:00   (xsun)

frazierw ttysr   Dec  3 23:01   (dov)

buckeye  ttyss   Dec  3 23:20   (mac2)

mtaylor  ttyst   Dec  3 23:22   (dov)

look     ttysu   Dec  3 23:12   (age)

janitor  ttysw   Dec  3 18:29   (age)

ajones   ttysx   Dec  3 23:23   (rassilon)

~

~

~

~

~

~

~

~

~

~

~

~</PRE>

<P>If you press n to search for this pattern again, a slash appears at the very bottom line to show that vi understood your request. But the cursor stays exactly where it is, which indicates that this is the only occurrence of the pattern in this file.

<BR></P>

<P>You notice that the account janitor has all sorts of sessions running. To search backward for occurrences of their account, use the ? command:

<BR></P>

<PRE>~

~

?janitor_</PRE>

<P>The first search moves the cursor up one line, which leaves the screen looking almost the same:

<BR></P>

<PRE>cdemmert ttysk   Dec  3 22:37   (xsun)

jrlee    ttysn   Dec  3 22:53   (mac1)

fitzgejs ttyso   Dec  3 23:18   (dov)

doerrhb  ttysp   Dec  3 23:20   (dov)

cdemmert ttysq   Dec  3 23:00   (xsun)

frazierw ttysr   Dec  3 23:01   (dov)

buckeye  ttyss   Dec  3 23:20   (mac2)

mtaylor  ttyst   Dec  3 23:22   (dov)

look     ttysu   Dec  3 23:12   (age)

janitor  ttysw   Dec  3 18:29   (age)

ajones   ttysx   Dec  3 23:23   (rassilon)

~

~

~

~

~

~

~

~

~

~

~

~

?janitor</PRE>

<P>Here's where n, or next search, can come in handy. If you press n this time and there is another occurrence of the pattern in the file, vi moves you directly to the match:

<BR></P>

<PRE>yuxi     ttyrn   Dec  1 14:19   (pc)

frodo    ttyro   Dec  3 22:01   (mentor)

labeck   ttyrt   Dec  3 22:02   (dov)

chenlx2  ttyru   Dec  3 21:53   (mentor)

leungtc  ttys0   Nov 28 15:11   (gold)

chinese  ttys2   Dec  3 22:53   (excalibur)

cdemmert ttys5   Dec  3 23:00   (mentor)

yuenca   ttys6   Dec  3 23:00   (mentor)

janitor  ttys7   Dec  3 18:18   (age)

mathisbp ttys8   Dec  3 23:17   (dov)

janitor  ttys9   Dec  3 18:18   (age)

cs541    ttysC   Dec  2 15:16   (solaria)

yansong  ttysL   Dec  1 14:44   (math)

mdps     ttysO   Nov 30 19:39   (localhost)

md       ttysU   Dec  2 08:45   (muller)

jac      ttysa   Dec  3 18:18   (localhost)

eichsted ttysb   Dec  3 23:21   (pc1)

sweett   ttysc   Dec  3 22:40   (dov)

wellman  ttysd   Dec  3 23:01   (dov)

tuttleno ttyse   Dec  3 23:03   (indyvax)

wu       ttysf   Dec  3 23:10   (term01)

daurismj ttysg   Dec  3 23:10   (dov)

cs414    ttysh   Dec  3 23:12   (xds)</PRE>

<P>When you're done, quit vi by using :q.

<BR></P>

<P>There are not dozens, but hundreds of commands in vi. Rather than overwhelm you with all of them, even in a table, I have opted instead to work with the most basic and important commands.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I11" NAME="I11">

<FONT SIZE=3><B>How to Start </B><B>vi</B><B> Correctly</B>

<BR></FONT></A></CENTER></H4>

<P>The vi command wouldn't be part of UNIX if it didn't have some startup options available, but there really are only two worth mentioning. The -R flag sets up vi as a read-only file to ensure that you don't accidentally modify a file. The second option 
doesn't start with a hyphen, but with a plus sign: any command following the plus sign is used as an initial command to the program. This is more useful than it may sound. The command vi +$ sample, for example, starts the editor at the bottom of the file 
sample, and vi +17 sample starts the editor on the 17th line of sample.

<BR></P>

<P>First, this is the read-only format:

<BR></P>

<PRE>% vi -R buckaroo

I found myself stealing a peek at my own watch and overhead

General Catbird's 

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

&quot;buckaroo&quot; [Read only] 8 lines, 270 characters</PRE>

<P>Notice the addition of the [Read only] message on the status line. You can edit the file, but if you try to save the edits with :w, you will see this:

<BR></P>

<PRE>~

~

&quot;buckaroo&quot; File is read only</PRE>

<P>Quit vi with :q!.

<BR></P>

<P>Next, recall that janitor occurs in many places in the big.output file. Start vi on the file line that contains the pattern janitor in the file:

<BR></P>

<PRE>% vi +/janitor big.output

brandt   ttyrb   Nov 28 23:03   (age)

holmes   ttyrj   Dec  3 21:59   (age)

yuxi     ttyrn   Dec  1 14:19   (pc)

frodo    ttyro   Dec  3 22:01   (mentor)

labeck   ttyrt   Dec  3 22:02   (dov)

chenlx2  ttyru   Dec  3 21:53   (mentor)

leungtc  ttys0   Nov 28 15:11   (gold)

chinese  ttys2   Dec  3 22:53   (excalibur)

cdemmert ttys5   Dec  3 23:00   (mentor)

yuenca   ttys6   Dec  3 23:00   (mentor)

janitor  ttys7   Dec  3 18:18   (age)

mathisbp ttys8   Dec  3 23:17   (dov)

janitor  ttys9   Dec  3 18:18   (age)

cs541    ttysC   Dec  2 15:16   (solaria)

yansong  ttysL   Dec  1 14:44   (math)

mdps     ttysO   Nov 30 19:39   (localhost)

md       ttysU   Dec  2 08:45   (muller)

jac      ttysa   Dec  3 18:18   (localhost)

eichsted ttysb   Dec  3 23:21   (pc1)

sweett   ttysc   Dec  3 22:40   (dov)

wellman  ttysd   Dec  3 23:01   (dov)

tuttleno ttyse   Dec  3 23:03   (indyvax)

wu       ttysf   Dec  3 23:10   (term01)

&quot;big.output&quot; 40 lines, 1659 characters</PRE>

<P>This time notice where the cursor is sitting.

<BR></P>

<P>Finally, launch vi with the cursor on the third line of the file buckaroo:

<BR></P>

<PRE>% vi +3 buckaroo

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

&quot;buckaroo&quot; 8 lines, 270 characters</PRE>

<P>Again, notice where the cursor rests.

<BR></P>

<P>At times it can be helpful to know these two starting options. In particular, I often use +/<I>pattern</I> to start the editor at a specific pattern, but you can use vi for years without ever knowing more than just the name of the command itself.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I12" NAME="I12">

<FONT SIZE=3><B>The Key Colon Commands in </B><B>vi</B>

<BR></FONT></A></CENTER></H4>

<P>Without too much explanation, you have learned a few colon commands, commands that begin with a colon. The colon immediately zooms the cursor to the bottom of the screen for further input. These commands are actually a subset of quite a large range of 
commands, all part of the ex editor that lives inside the vi visual interface. (That's why vi is known as an interface to an editor, rather than an editor itself.)

<BR></P>

<P>The colon commands that are most helpful are :w, which writes the buffer back to the system; :w <I>filename</I>, which writes the buffer to the specified file; :q, which quits the editor; :q!, which quits regardless of whether any changes have occurred; 

:r <I>filename</I>, which reads another file into the editor; :e <I>filename</I>, which switches to the specified file; and :n, which moves to the next file in a list of files.

<BR></P>

<P>Start vi again, this time specifying more than one file on the command line; vi quickly indicates that you want to edit more than one file:

<BR></P>

<PRE>% vi buckaroo big.output

2 files to edit.</PRE>

<P>Then it clears the screen and shows you the first file:

<BR></P>

<PRE>I found myself stealing a peek at my own watch and overhead

General Catbird's 

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

&quot;buckaroo&quot; 8 lines, 270 characters</PRE>

<P>Using :w results in this:

<BR></P>

<PRE>~

~

~

&quot;buckaroo&quot; 8 lines, 270 characters</PRE>

<P>Instead, try writing to a different file, using :w newfile:

<BR></P>

<PRE>~

~

:w newfile_</PRE>

<P>When you press Return, you see this:

<BR></P>

<PRE>~

~

&quot;newfile&quot; [New file] 8 lines, 270 characters</PRE>

<P>Now pay attention to where the cursor is in the file. The :r, or read file, command always includes the contents of the file below the current line. Just before you press Return, then, here's what your screen looks like:

<BR></P>

<PRE>I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

:r newfile_</PRE>

<P>Pressing Return yields this:

<BR></P>

<PRE>I found myself stealing a peek at my own watch and overhead

General Catbird's

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

~

~

~

~

~

~

~</PRE>

<P>This can be a helpful way to include one file within another, or to build a file that contains lots of other files.

<BR></P>

<P>Now that you've garbled the file, save it to a new file, buckaroo.confused:

<BR></P>

<PRE>~

~

:w buckaroo.confused_</PRE>

<P>Press Return:

<BR></P>

<PRE>~

~

&quot;buckaroo.confused&quot; [New file] 16 lines, 540 characters</PRE>

<P>Now it's time to move to the second file in the list of files given to vi at startup. To do this, I use the :n, or next file, command:

<BR></P>

<PRE>~

~

:n_</PRE>

<P>Pressing Return results in the next file being brought into the editor to replace the text removed earlier:

<BR></P>

<PRE>leungtc  ttyrV   Dec  1 18:27   (magenta)

tuyinhwa ttyrX   Dec  3 22:38   (expert)

hollenst ttyrZ   Dec  3 22:14   (dov)

brandt   ttyrb   Nov 28 23:03   (age)

holmes   ttyrj   Dec  3 21:59   (age)

yuxi     ttyrn   Dec  1 14:19   (pc)

frodo    ttyro   Dec  3 22:01   (mentor)

labeck   ttyrt   Dec  3 22:02   (dov)

chenlx2  ttyru   Dec  3 21:53   (mentor)

leungtc  ttys0   Nov 28 15:11   (gold)

chinese  ttys2   Dec  3 22:53   (excalibur)

cdemmert ttys5   Dec  3 23:00   (mentor)

yuenca   ttys6   Dec  3 23:00   (mentor)

janitor  ttys7   Dec  3 18:18   (age)

mathisbp ttys8   Dec  3 23:17   (dov)

janitor  ttys9   Dec  3 18:18   (age)

cs541    ttysC   Dec  2 15:16   (solaria)

yansong  ttysL   Dec  1 14:44   (math)

mdps     ttysO   Nov 30 19:39   (localhost)

md       ttysU   Dec  2 08:45   (muller)

jac      ttysa   Dec  3 18:18   (localhost)

eichsted ttysb   Dec  3 23:21   (pc1)

sweett   ttysc   Dec  3 22:40   (dov)

&quot;big.output&quot; 40 lines, 1659 characters</PRE>

<P>In the middle of working on this, you suddenly realize that you need to make a slight change to the recently saved buckaroo.confused file. That's where the :e command comes in handy. Using it, you can switch to any other file:

<BR></P>

<PRE>~

~

:e buckaroo.confused_</PRE>

<P>Press Return:

<BR></P>

<PRE>I found myself stealing a peek at my own watch and overhead

General Catbird's

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

~

~

~

~

~

~

~

&quot;buckaroo.confused&quot; 16 lines, 540 characters</PRE>

<P>Table 7.2 summarizes the basic vi commands you learned in this section.

<BR></P>

<UL>

<LH><B>Table 7.2. Basic </B><B>vi</B><B> commands.</B>

<BR></LH></UL>

<TABLE BORDER>

<TR>

<TD>

<PRE><I>Command</I>

<BR></PRE>

<TD>

<PRE><I>Meaning</I>

<BR></PRE>

<TR>

<TD>

<P>0</P>

<TD>

<P>Move to beginning of line.</P>

<TR>

<TD>

<P>$</P>

<TD>

<P>Move to end of line.</P>

<TR>

<TD>

<P>/pattern</P>

<TD>

<P>Search forward for the next line using a specified pattern.</P>

<TR>

<TD>

<P>?pattern</P>

<TD>

<P>Search backward for the next line using a specified pattern.</P>

<TR>

<TD>

<P>a</P>

<TD>

<P>Append text&#151;move into insert mode after the current character.</P>

<TR>

<TD>

<P>^b</P>

<TD>

<P>Back up one screen of text.</P>

<TR>

<TD>

<P>B</P>

<TD>

<P>Back up one space-delimited word.</P>

<TR>

<TD>

<P>b</P>

<TD>

<P>Back up one word.</P>

<TR>

<TD>

<P>Backspace</P>

<TD>

<P>Move left one character.</P>

<TR>

<TD>

<P>^d</P>

<TD>

<P>Move down half a page.</P>

<TR>

<TD>

<P>D</P>

<TD>

<P>Delete through end of line.</P>

<TR>

<TD>

<P>d</P>

<TD>

<P>Delete&#151;dw = delete word, dd = delete line.</P>

<TR>

<TD>

<P>Esc</P>

<TD>

<P>Leave insert mode, return to command mode.</P>

<TR>

<TD>

<P>^f</P>

<TD>

<P>Move forward one screen of text.</P>

<TR>

<TD>

<P>G</P>

<TD>

<P>Go to the last line of the file.</P>

<TR>

<TD>

<P>nG</P>

<TD>

<P>Go to the nth line of the file.</P>

<TR>

<TD>

<P>h</P>

<TD>

<P>Move left one character.</P>

<TR>

<TD>

<P>i</P>

<TD>

<P>Insert text&#151;move into insert mode before the current character.</P>

<TR>

<TD>

<P>j</P>

<TD>

<P>Move down one line.</P>

<TR>

<TD>

<P>k</P>

<TD>

<P>Move up one line.</P>

<TR>

<TD>

<P>l</P>

<TD>

<P>Move right one character.</P>

<TR>

<TD>

<P>n</P>

<TD>

<P>Repeat last search.</P>

<TR>

<TD>

<P>O</P>

<TD>

<P>Open new line for insert above the current line.</P>

<TR>

<TD>

<P>o</P>

<TD>

<P>Open new line for insert below the current line.</P>

<TR>

<TD>

<P>Return</P>

<TD>

<P>Move to beginning of next line.</P>

<TR>

<TD>

<P>^u</P>

<TD>

<P>Move up half a page.</P>

<TR>

<TD>

<P>U</P>

<TD>

<P>Undo&#151;replace current line if changed.</P>

<TR>

<TD>

<P>u</P>

<TD>

<P>Undo the last change made to the file.</P>

<TR>

<TD>

<P>W</P>

<TD>

<P>Move forward one space-delimited word.</P>

<TR>

<TD>

<P>w</P>

<TD>

<P>Move forward one word.</P>

<TR>

<TD>

<P>x</P>

<TD>

<P>Delete a single character.</P>

<TR>

<TD>

<P>:e <I>file</I></P>

<TD>

<P>Edit a specified file without leaving vi.</P>

<TR>

<TD>

<P>:n</P>

<TD>

<P>Move to the next file in the file list.</P>

<TR>

<TD>

<P>:q</P>

<TD>

<P>Quit vi and return to the UNIX prompt.</P>

<TR>

<TD>

<P>:q!</P>

<TD>

<P>Quit vi and return to the system, throwing away any changes made to the file.</P>

<TR>

<TD>

<P>:r file</P>

<TD>

<P>Read the contents of a specified file, including it in the current edit buffer.</P>

<TR>

<TD>

<P>:w file</P>

<TD>

<P>Write the contents of the buffer to a specified file.</P>

<TR>

<TD>

<P>:w</P>

<TD>

<P>Write the edit buffer to the system.</P></TABLE>

<H4 ALIGN="CENTER">

<CENTER><A ID="I13" NAME="I13">

<FONT SIZE=3><B>Advanced </B><B>vi</B><B> Tricks, Tools, and Techniques</B>

<BR></FONT></A></CENTER></H4>

<P>In the last section you learned some fifty vi commands, which enable you to easily move about in files, insert text, delete other text, search for specific patterns, and move from file to file without leaving the program. This section expands your 
expertise by showing you some more powerful vi commands.

<BR></P>

<P>To be honest, you can do fine in vi without ever reading this section. You already know how to insert and delete text, save or quit without saving, and search for particular patterns, even from the command line as you start vi for the first time! On the 

other hand, vi is like any other complex topic. The more you're willing to study and learn, the more the program will bow to your needs. This means you can accomplish a wider variety of different tasks on a daily basis.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I14" NAME="I14">

<FONT SIZE=3><B>The Change and Replace Commands</B>

<BR></FONT></A></CENTER></H4>

<P>In the last section, you fixed a variety of problems by deleting words and replacing them with new words. A much smarter way to do this is to use either the change or the replace commands.

<BR></P>

<P>Each command has a lowercase and uppercase version, and each is quite different from the other. The r command replaces the character that the cursor is sitting upon with the next character you type, whereas the R command puts you into replace mode, so 
that anything you type overwrites whatever is already on the line. By contrast, C replaces everything on the line with whatever you type. The c change command is the most powerful of them all. It works just like the d command. You can use the c command 
with any address command, and it allows you to change text through that address, whether it's a word, line, or even the rest of the document.

<BR></P>

<P>Start vi with the buckaroo.confused file.

<BR></P>

<PRE>I found myself stealing a peek at my own watch and overhead

General Catbird's

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

~

~

~

~

~

~

&quot;buckaroo.confused&quot; 16 lines, 540 characters</PRE>

<P>Without moving the cursor at all, press R. Nothing happens, or so it seems. Now type the words Excerpt from &quot;Buckaroo Banzai&quot; and watch what happens:

<BR></P>

<PRE>Excerpt from &quot;Buckaroo Banzai&quot;at my own watch and overhead

General Catbird's

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.</PRE>

<P>Now press Esc and notice that what you see on the screen is exactly what's in the file.

<BR></P>

<P>This isn't, however, quite what you want. You could use either D or d$ to delete through the end of the line, but that's a bit awkward. Instead, use 0 to move back to the beginning of the line:

<BR></P>

<PRE>Excerpt from &quot;Buckaroo Banzai&quot; at my own watch and overhead

General Catbird's

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.</PRE>

<P>This time, press C to change the contents of the line. Before you even type a single character of the new text, notice what the line now looks like:

<BR></P>

<PRE>Excerpt from &quot;Buckaroo Banzai&quot; at my own watch and overhead

General Catbird'$

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.</PRE>

<P>Here's where a subtle difference comes into play! Look at the very last character on the current line. When you pressed C, the program replaced the &quot;s&quot; with a &quot;$&quot; to show the range of the text to be changed by the command. Press the 

Tab key once, and then type Excerpt from &quot;Buckaroo Bansai&quot; by Earl MacRauch.

<BR></P>

<PRE>Excerpt from &quot;Buckaroo Bansai&quot; by Earl MacRauchhead General Catbird'$

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.</PRE>

<P>This time, watch what happens when you press Esc:

<BR></P>

<PRE>Excerpt from &quot;Buckaroo Bansai&quot; by Earl MacRauch

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.</PRE>

<P>There's another mistake. It should be Buckaroo Banzai, not Bansai. This is a chance to try the new r command.

<BR></P>

<P>Use cursor control keys to move the cursor to the offending letter. Use b to back up words and then h a few times to move into the middle of the word. Your screen now looks like this:

<BR></P>

<PRE>                Excerpt from &quot;Buckaroo Bansai&quot; by Earl MacRauch

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.</PRE>

<P>Now press r. Again, nothing happens; the cursor doesn't move. Press r again to make sure it worked:

<BR></P>

<PRE>Excerpt from &quot;Buckaroo Banrai&quot; by Earl MacRauch

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.</PRE>

<P>That's no good. It replaced the &quot;s&quot; with an &quot;r,&quot; which definitely isn't correct. Press rz, and you should have the following:

<BR></P>

<PRE>Excerpt from &quot;Buckaroo Banzai&quot; by Earl MacRauch

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.</PRE>

<P>Okay, those are the easy ones. Now it's time to see what the c command can do for you. In fact, it's incredibly powerful. You can change just about any range of information from the current point in the file in either direction!

<BR></P>

<P>To start, move to the middle of the file, where the second copy of the passage is found:

<BR></P>

<PRE>Excerpt from &quot;Buckaroo Banzai&quot; by Earl MacRauch

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

~

~

~

~

~

~

~

&quot;buckaroo.confused&quot; 16 lines, 540 characters</PRE>

<P>Change the word &quot;aide&quot; that the cursor is sitting on to &quot;The tall beige wall clock opted to.&quot; First press c and note that, like many other commands in vi, nothing happens. Now press w to change just the first word. The screen should 

look like this:

<BR></P>

<PRE>&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

aid$ give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;</PRE>

<P>Again, the program has replaced the last character of the change to a $. Now type The tall beige wall clock opted to. Once you reach the $, the editor stops overwriting characters and starts inserting them instead, so the screen now looks like this:

<BR></P>

<PRE>&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

The tall beige wall clock opted to_give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;</PRE>

<P>Press Esc and you're done (though you can undo the change with the u or U commands, of course).

<BR></P>

<P>Tall and beige or not, this section makes no sense now, so change this entire line using the $ motion command. First use 0 to move to the beginning of the line and then press c$:

<BR></P>

<PRE>&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

The tall beige wall clock opted to give him the latest$

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;</PRE>

<P>This is working. The last character changed to the dollar sign. Press Esc, and the entire line is deleted:

<BR></P>

<PRE>&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

_

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;</PRE>

<P>There are still five lines below the current line. You could delete them and then type in the information you want, but that's primitive. Instead, the c command comes to the rescue. Move down one line, press c5, and press Return. Watch what happens:

<BR></P>

<PRE>&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

~

~

~

~

~

~

~

~

~

~

~

~

6 lines changed</PRE>

<P>In general, you can always change the current and next line by using c followed by Return (because the Return key is a motion key too, remember). By prefacing the command with a number, you changed the range from two lines to five.

<BR></P>

<P>You might be asking, &quot;Why two lines?&quot; The answer is subtle. In essence, anytime you use the c command you change the current line plus any additional lines that might be touched by the command. Pressing Return moves the cursor to the following 

line; therefore, the current line (starting at the cursor location) through the following line are changed. The command should probably just change to the beginning of the following line, but that's beyond our control!

<BR></P>

<P>Now press Tab four times, type in (page 8), and press the Esc key. The screen should look like this:

<BR></P>

<PRE>&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

                                (page 8)

~

~

~</PRE>

<P>What if you change your mind? That's where the u command comes in handy. A single press of the key and the original copy is restored:

<BR></P>

<PRE>Excerpt from &quot;Buckaroo Banzai&quot; by Earl MacRauch

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

~

~

~

~

~

~

~

5 more lines</PRE>

<P>The combination of replace and change commands adds a level of sophistication to an editor you might have thought could only insert and delete. There's much more to cover, so don't stop now!

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I15" NAME="I15">

<FONT SIZE=3><B>Numeric Repeat Prefixes</B>

<BR></FONT></A></CENTER></H4>

<P>You have now seen two commands that were prefixed by a number to cause a specific action. The G command moves you to the very last line of the file, unless you type in a number first. If you type in a number, the G command moves to the specified line 
number. Similarly, pressing a number and then the Return key causes vi to repeat the key the specified number of times.

<BR></P>

<P>Numeric repeat prefixes are actually widely available in vi, and this is the missing piece of your navigational tool set.

<BR></P>

<P>Move back to the top of the buckaroo.confused file. This time, use 1G to move there, rather than a bunch of k keys or other steps. The top of the screen now looks like this:

<BR></P>

<PRE>Excerpt from &quot;Buckaroo Banzai&quot; by Earl MacRauch

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.</PRE>

<P>Now move forward 15 words. Instead of pressing w 15 times, enter 15w.

<BR></P>

<PRE>Excerpt from &quot;Buckaroo Banzai&quot; by Earl MacRauch

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.</PRE>

<P>Now move down seven lines by pressing the 7 key followed by the Return key. Use o to give yourself a blank line and press Esc again:

<BR></P>

<PRE>&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

_

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;</PRE>

<P>You want to put &quot;Go Team Banzai!&quot; on the bottom, repeated three times. Can you guess how to do it? Simply press 3i to move into insert mode, and then type Go Team Banzai!. The screen looks like this:

<BR></P>

<PRE>&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

Go Team Banzai! _

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;</PRE>

<P>Pressing Esc has a dramatic result:

<BR></P>

<PRE>&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

Go Team Banzai! Go Team Banzai! Go Team Banzai!

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;</PRE>

<P>Now get rid of all the lines below the current line. There are many different ways to do this, but you're going to try to guess how many words are present and give dw a repeat count prefix to delete that many words. (Actually, you don't need to know the 

number of words, because vi will repeat the command only while it makes sense to do so).

<BR></P>

<P>I press 75dw and the screen instantly looks like this:

<BR></P>

<PRE>                Excerpt from &quot;Buckaroo Banzai&quot; by Earl MacRauch

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

Go Team Banzai! Go Team Banzai! Go Team Banzai!

~

~

~

~

~

~

~

~

~

~

~

7 lines deleted</PRE>

<P>Try the undo command here to see what happens!

<BR></P>

<P>Almost all commands in vi can work with a numeric repeat prefix, even commands that you might not expect to work, such as the i insert command. Remember that a request can be accomplished in many ways. To delete five words, for example, you could use 
5dw or d5w. Experiment on your own, and you'll get the idea.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I16" NAME="I16">

<FONT SIZE=3><B>Numbering Lines in the File</B>

<BR></FONT></A></CENTER></H4>

<P>It's very helpful to have an editor that works with the entire screen, but sometimes you only need to know what line you're currently on. Further, sometimes it can be very helpful to have all the lines numbered on the screen. With vi, you can do both of 

these&#151;the former by pressing ^g (remember, that's Ctrl+G) while in command mode, and the latter by using a complex colon command, :set number, followed by Return. To turn off the display of line numbers, simply type :set nonumber and press Return.

<BR></P>

<P>You're still looking at buckaroo.confused in vi. The screen looks like this:

<BR></P>

<PRE>Excerpt from &quot;Buckaroo Banzai&quot; by Earl MacRauch

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

Go Team Banzai! Go Team Banzai! Go Team Banzai!

~

~

~

~

~

~

~

~

~

~

~

7 lines deleted</PRE>

<P>Can you see where the cursor is? To find out what line number the cursor is on, press ^g. The information is listed on the status line at the bottom:

<BR></P>

<PRE>~

~

~

&quot;buckaroo.confused&quot; [Modified] line 10 of 11, column 1  &#151;90%&#151;</PRE>

<P>There's lots of information here. Included here is the name of the file (buckaroo.confused), an indication that vi thinks you've changed it since you started the program ([Modified]), the current line (10), total lines in the file (11), what column 
you're in, and, finally, an estimate of how far into the file you are.

<BR></P>

<P>Eleven lines? Count the display again. There are 12 lines. What's going on? The answer will become clear if you turn on line numbering for the entire file. To do this, type :, which zips the cursor to the bottom of the screen, where you then enter the 
set number command:

<BR></P>

<PRE>~

~

~

:set number_</PRE>

<P>Pressing Return causes the screen to change, thus:

<BR></P>

<PRE>1          Excerpt from &quot;Buckaroo Banzai&quot; by Earl MacRauch

     2  I found myself stealing a peek at my own watch and overhead General Catbird's

     3  aide give him the latest.

     4  &quot;He's not even here,&quot; went the conversation.

     5  &quot;Banzai.&quot;

     6  &quot;Where the hell is he?&quot;

     7  &quot;At the hospital in El Paso.&quot;

     8  &quot;What? Why weren't we informed? What's wrong with him?&quot;

     9

    10  Go Team Banzai! Go Team Banzai! Go Team Banzai!

    11

~

~

~

~

~

~

~

~

~

~</PRE>

<P>Now you can see why vi only figures that there are 11 lines, even though it seems by the screens shown here that there are 12 lines.

<BR></P>

<P>To turn off the line numbering, use the opposite command, :set nonumber, followed by Return.

<BR></P>

<P>There are definitely times when being able to include the number of each line is helpful. One example is if you are using awk and it's complaining about a specific line being in an inappropriate format (usually by saying syntax error, bailing out! or 
something similar).

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I17" NAME="I17">

<FONT SIZE=3><B>Search and Replace</B>

<BR></FONT></A></CENTER></H4>

<P>Though most of vi is easy to learn and use, one command that always causes great trouble for users is the search and replace command. The key to understanding this command is to remember that there's a line editor (ex) hidden underneath vi. Instead of 
trying to figure out some arcane vi command, it's easiest to just drop to the line editor and use a simple colon command&#151;one identical to the command used in sed&#151;to replace an old pattern with a new one. To replace an existing word on the current 

line with a new word (the simplest case), use :s/<I>old</I>/<I>new</I>/. If you want to have all occurrences on the current line matched, you need to add the g suffix (just as with sed): :s/<I>old</I>/<I>new</I>/g.

<BR></P>

<P>To change all occurrences of one word or phrase to another across the entire file, the command is identical to the preceding command, except that you must add a prefix indicating the range of lines affected. Recall that $ is the last line in the file, 
and that ranges are specified (in this case, as in sed) by two numbers separated by a comma. It should be no surprise that the command is :1,$ s/<I>old</I>/<I>new</I>/g.

<BR></P>

<P>You're still working with the buckaroo.confused file, so your screen should look very similar to this:

<BR></P>

<PRE>Excerpt from &quot;Buckaroo Banzai&quot; by Earl MacRauch

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

Go Team Banzai! Go Team Banzai! Go Team Banzai!

~

~

~

~

~

~

~

~

~

~

~

~

~

~</PRE>

<P>The cursor is on the very first line. Rename Earl. Type :. The cursor immediately moves to the bottom. Then type s/Earl/Duke/. Pressing Return produces this:

<BR></P>

<PRE>Excerpt from &quot;Buckaroo Banzai&quot; by Duke MacRauch

I found myself stealing a peek at my own watch and overhead General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.</PRE>

<P>As you can see, this maneuver was simple and effective.

<BR></P>

<P>Maybe developmental psychology is your bag. Instead of having this Banzai character, you want your fictional character to be called Bandura. You could use the previous command to change the occurrence on the current line, but you really want to change 
all occurrences within the file.

<BR></P>

<P>This is no problem. Type :1,$ s/Banzai/Bandura/ and press Return. Here's the result:

<BR></P>

<PRE>Excerpt from &quot;Buckaroo Bandura&quot; by Duke MacRauch

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Bandura.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

Go Team Bandura! Go Team Banzai! Go Team Banzai!

~

~

~

~

~

~

~

~

~

~

~

~

~</PRE>

<P>The result is not quite right. You forgot the trailing g, so vi changed only the very first occurrence on each line, making the &quot;go team&quot; exhortation rather confusing.

<BR></P>

<P>To try again, type :1,$ s/Banzai/Bandura/g and press Return. The screen changes as desired:

<BR></P>

<PRE>Excerpt from &quot;Buckaroo Bandura&quot; by Duke MacRauch

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Bandura.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

Go Team Bandura! Go Team Bandura! Go Team Bandura!

~

~

~

~

~

~

~

~

~

~

~

7 substitutions</PRE>

<P>Notice that vi also indicates the total number of substitutions in this case.

<BR></P>

<P>Press u to undo the last change.

<BR></P>

<P>Search and replace is one area where a windowing system, like that on a Macintosh or a PC running Windows, comes in handy. A windowing system offers different boxes for the old and new patterns, and shows each change and a dialog box asking, 
&quot;Should I change this one?&quot; Alas, this is UNIX and it's still designed to run on ASCII terminals.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I18" NAME="I18">

<FONT SIZE=3><B>Key Mapping with the </B><B>map</B><B> Command</B>

<BR></FONT></A></CENTER></H4>

<P>As you have worked through the various examples, you might have tried pressing the arrow keys on your keyboard or perhaps the Ins or Del keys. Odds are likely that the keys not only didn't work, but instead caused all sorts of weird things to happen!

<BR></P>

<P>The good news is that vi has a facility that enables you to map any key to a specific action. If these key mappings are saved in a file called .exrc in your home directory, the mappings will be understood by vi automatically each time you use the 
program. The format for using the map command is :map <I>key</I> <I>command-sequence</I>. (In a nutshell, mapping is a way of associating an action with another action or result. For example, by plugging your computer into the right wall socket, you could 

map the action of flipping the light switch on the wall with the result of having your computer turn on.)

<BR></P>

<P>You can also save other things in your .exrc file, including the :set number option if you're a nut about seeing line numbers. More interestingly, vi can be taught abbreviations, so that each time you press the abbreviation, vi expands it. The format 
for defining abbreviations is :abbreviate <I>abbreviation expanded-value</I>. Finally, any line that begins with a double quote is considered a comment and is ignored.

<BR></P>

<P>It's finally time to leave the buckaroo.confused file, and restart vi, this time with the .exrc file in your home directory:

<BR></P>

<PRE>% cd 

% vi .exrc

_

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

&quot;.exrc&quot; [New file]</PRE>

<P>Before you actually add any information to this new file, define a few abbreviations to make life a bit easier. To do this, press :, which moves the cursor to the bottom of the screen. Then define tyu as a simple abbreviation for the lengthy phrase 
Teach Yourself UNIX in a Few Minutes:

<BR></P>

<PRE>~

~

~

:abbreviate tyu Teach Yourself UNIX in a Few Minutes_</PRE>

<P>Pressing Return moves the cursor back to the top.

<BR></P>

<P>Now try the abbreviation. Recall that in the .exrc, lines beginning with a double quote are comments and are ignored when vi starts up. Press i to enter insert mode, and then type &quot; Sample .exrc file as shown in tyu. The screen looks like this:

<BR></P>

<PRE>&quot; Sample .exrc file as shown in tyu_

~

~</PRE>

<P>As soon as you press Return or enter a space or punctuation character, the abbreviation is expanded. In this case, move to the next line by pressing Return:

<BR></P>

<PRE>&quot; Sample .exrc file as shown in Teach Yourself UNIX in a Few Minutes

_

~

~</PRE>

<P>Press Esc to leave the insert mode.

<BR></P>

<P>This feature can also be used to correct common typos you make. Many people have a bad habit of typing &quot;teh&quot; instead of &quot;the.&quot; Because vi is smart about abbreviation expansion, you can abbreviate &quot;the&quot; as &quot;teh&quot; 
and not get into trouble:

<BR></P>

<PRE>~

~

:ab teh the_</PRE>

<HR ALIGN=CENTER>

<NOTE>

<IMG SRC="imp.gif" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/imp.gif" WIDTH = 68 HEIGHT = 35><B>TIP:</B> You don't have to type &quot;abbreviation&quot; each time. The first two letters are sufficient for vi to figure out what's going on.

<BR></NOTE>

<HR ALIGN=CENTER>

<P>Press Return. Now whenever you make that typo, the editor will fix it. To demonstrate this, add a second comment to this file. Adding a comment is easy because you're still at the beginning of the second line. When you press i and type &quot; (subtly 
different from the example in teh, you get the following result:

<BR></P>

<PRE>&quot; Sample .exrc file as shown in Teach Yourself UNIX in a Few Minutes

&quot; (subtly different from the example in the_

~

~</PRE>

<P>If you enter another character instead of pressing the spacebar, vi is smart enough not to expand the abbreviation. Try it yourself. After pressing the h key again, you'll see this:

<BR></P>

<PRE>&quot; Sample .exrc file as shown in Teach Yourself UNIX in a Few Minutes

&quot;  (subtly different from the example in tehh_

~

~</PRE>

<P>Because you're still in insert mode, however, you can backspace and replace the spare h with a space, which instantly fixes the spelling. Finally, type book) and press Esc to return to command mode.

<BR></P>

<P>There's one more nifty abbreviation trick. Type :ab by itself and press Return. vi shows you a list of the abbreviations currently in effect:

<BR></P>

<PRE>~

~

:ab

tyu     tyu     Teach Yourself UNIX in a Few Minutes

teh     teh     the

 [Hit any key to continue]  _</PRE>

<P>Okay, now you can move on to key mapping.

<BR></P>

<P>Key mapping is as easy as defining abbreviations, except you must remember one thing: any control character entered must be prefaced with a ^v so that vi doesn't interpret it immediately. The Esc key is included in this list, too.

<BR></P>

<P>To map the Clear key to the D function, which, as you recall, deletes text through the end of the current line, type :map, followed by a single space:

<BR></P>

<PRE>~

~

:map</PRE>

<HR ALIGN=CENTER>

<NOTE>

<IMG SRC="warning.gif" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/warning.gif" WIDTH = 37 HEIGHT = 35><B>WARNING:</B> If you use many different terminals, you may have to remap the Clear (Clr) key.

<BR></NOTE>

<HR ALIGN=CENTER>

<P>Now you need to type the ^v; otherwise, when you press the Clear key, it will send an Escape sequence that will confuse vi to no end. Press ^v:

<BR></P>

<PRE>~

~

:map ^</PRE>

<P>The cursor is floating over the caret, which indicates the next character typed should be a control character. Instead of pressing any specific character, however, simply press the Clear key. The result is that it sends the Escape sequence, and vi 
captures it without a problem:

<BR></P>

<PRE>~

~

:map ^[OP_</PRE>

<P>Now type another space, because the key part of the key mapping has been defined. Then type the command to which vi should map the Clear key:

<BR></P>

<PRE>~

~

:map ^[OP D_</PRE>

<P>Press Return, and it's done! To test the key mapping, move back to the phrase Few Minutes in the first line:

<BR></P>

<PRE>&quot; Sample .exrc file as shown in Teach Yourself UNIX in a Few Minutes

&quot;  (subtly different from the example in the book)

~

~</PRE>

<P>To clear this line, you need only press Clear.

<BR></P>

<P>To save this as a permanent key mapping in this .exrc file, duplicate each keystroke, but this time do it in insert mode instead of at the bottom of the screen. The result is a file that looks like this:

<BR></P>

<PRE>&quot; Sample .exrc file as shown in Teach Yourself UNIX in a

&quot;  (subtly different from the example in the book)

:map ^[OP D_

~

~</PRE>

<P>Mapping the arrow keys is done the same way, and typing :ab and then pressing Return shows all abbreviations. Typing :map and then Return demonstrates that you already have your arrow keys mapped to the vi motion keys:

<BR></P>

<PRE>~

~

<B>:map</B>

up      ^[[A    k

down    ^[[B    j

left    ^[[D    h

right   ^[[C    l

^[OP    ^[OP    D

 [Hit any key to continue] _</PRE>

<P>You can see that sometimes the system can be smart about defining specific keys by name rather than by value, but the end result is the same. You can now use the arrow keys and Clear key, and vi knows what they mean.

<BR></P>

<P>Here's a final demonstration of what you can do with keyboard mapping. You'll often encounter a simple, tedious activity you must do over and over. An example might be surrounding a specific word with quotes to meet a style guideline. This sounds more 
painful than it need be, because a simple key mapping can automate the entire process of quoting the current word.

<BR></P>

<P>You know that ^a isn't used by vi, so you can map that to the new quote-a-single-word command, making sure that you use ^v before each control character or Esc. Type the characters :map ^v^a i&quot;:

<BR></P>

<PRE>~

~

:map ^A i&quot;_</PRE>

<P>Press ^v and then the Esc key. To insert a double quote, you need to have vi go into insert mode (the i), type the quote, and receive an Esc to leave insert mode. The e command moves to the end of the current word, so type that, followed by the commands 

needed to append the second double quote. The final map now looks like this:

<BR></P>

<PRE>~

~

:map ^A i&quot;^[ea&quot;^[_</PRE>

<P>Press Return and it's done. Now move to the beginning of a word and try the new key mapping for ^a.

<BR></P>

<P>There are a variety of customizations you can use with the vi editor, including teaching it about special keys on your keyboard and defining task-specific keys to save time. You can use it to abbreviate commonly used words or phrases to save time or 
avoid typographical errors. Be cautious when working with the .exrc file, however, because if you enter information that isn't valid, it can be a bit confusing to fix it. Always try the command directly before using it in a special key mapping, and you'll 

stay out of trouble.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I19" NAME="I19">

<FONT SIZE=3><B>Moving Sentences and Paragraphs</B>

<BR></FONT></A></CENTER></H4>

<P>You've learned quite a variety of different commands for moving about in files, but there are two more vi movement commands for you to try. So far, movement has been based on screen motion, but vi hasn't particularly known much about the information in 

the file itself: press k and you move up a line, regardless of what kind of file you're viewing.

<BR></P>

<P>The vi editor is smarter than that, however. It has some movement commands that are defined by the text you're currently editing. Each of these is simply a punctuation character on your keyboard, but each is quite helpful. The first is ), which moves 
the cursor forward to the beginning of the next sentence in the file. Use the opposite, (, and you can move to the beginning of the current sentence in the file. Also worth experimenting with is }, which moves forward a paragraph in the file, and {, which 

moves backwards a paragraph.

<BR></P>

<P>To try this out, create a new file. Start vi and type the following text:

<BR></P>

<PRE>% <B>cat dickens.note</B>

                                A Tale of Two Cities

                                      Preface

When I was acting, with my children and friends, in Mr Wilkie Collins's

drama of The Frozen Deep, I first conceived the main idea of this

story.  A strong desire was upon me then, to

embody it in my own person;

and I traced out in my fancy, the state of mind of which it would

necessitate the presentation

to an observant spectator, with particular

care and interest.

As the idea became familiar to me, it gradually shaped itself into its

present form.  Throughout its execution, it has had complete possession

of me; I have so far verified what

is done and suffered in these pages,

as that I have certainly done and suffered it all myself.

Whenever any reference (however slight) is made here to the condition

of the French people before or during the Revolution, it is truly made,

on the faith of the most trustworthy

witnesses.  It has been one of my hopes to add

something to the popular and picturesque means of

understanding that terrible time, though no one can hope

to add anything to the philosophy of Mr Carlyle's wonderful book.

Tavistock House

November 1859</PRE>

<P>When you start vi on this file, here's what your initial screen looks like:

<BR></P>

<PRE>A Tale of Two Cities

                                      Preface

When I was acting, with my children and friends, in Mr Wilkie Collins's

drama of The Frozen Deep, I first conceived the main idea of this

story.  A strong desire was upon me then, to

embody it in my own person;

and I traced out in my fancy, the state of mind of which it would

necessitate the presentation

to an observant spectator, with particular

care and interest.

As the idea became familiar to me, it gradually shaped itself into its

present form.  Throughout its execution, it has had complete possession

of me; I have so far verified what

is done and suffered in these pages,

as that I have certainly done and suffered it all myself.

Whenever any reference (however slight) is made here to the condition

of the French people before or during the Revolution, it is truly made,

on the faith of the most trustworthy

witnesses.  It has been one of my hopes to add

something to the popular and picturesque means of

&quot;dickens.note&quot; 28 lines, 1122 characters</PRE>

<P>Move to the beginning of the first paragraph of text by typing /When and pressing Return. Now the screen looks like this:

<BR></P>

<PRE>A Tale of Two Cities

                                      Preface

When I was acting, with my children and friends, in Mr Wilkie Collins's

drama of The Frozen Deep, I first conceived the main idea of this

story.  A strong desire was upon me then, to

embody it in my own person;</PRE>

<P>Press ) once. The cursor moves to the beginning of the next sentence:

<BR></P>

<PRE>When I was acting, with my children and friends, in Mr Wilkie Collins's

drama of The Frozen Deep, I first conceived the main idea of this

story.  A strong desire was upon me then, to

embody it in my own person;

and I traced out in my fancy, the state of mind of which it would

necessitate the presentation</PRE>

<P>Try the ( to move back a sentence. You end up back on the &quot;W&quot; in &quot;When&quot; at the beginning of the sentence. Repeatedly pressing ( and ) should let you fly back and forth through the file, sentence by sentence. Notice what occurs when 
you're at the top few lines of the title.

<BR></P>

<HR ALIGN=CENTER>

<NOTE>

<IMG SRC="warning.gif" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/warning.gif" WIDTH = 37 HEIGHT = 35><B>WARNING:</B> A little experimentation will demonstrate that vi defines a sentence as anything that occurs at the beginning of a block of text (for example, When I was_), or as any word that follows a 
punctuation character followed by two spaces. This is a bit unfortunate, because modern typographic conventions have moved away from using two spaces after the end of a sentence. If you only use one space between sentences&#151;as I have for this 
book&#151;moving by sentence is less helpful.

<BR></NOTE>

<HR ALIGN=CENTER>

<P>You can move back to the opening word of the first paragraph by pressing n to repeat the last search pattern. The screen now looks like this:

<BR></P>

<PRE>A Tale of Two Cities

                                      Preface

When I was acting, with my children and friends, in Mr Wilkie Collins's

drama of The Frozen Deep, I first conceived the main idea of this

story.  A strong desire was upon me then, to

embody it in my own person;

and I traced out in my fancy, the state of mind of which it would

necessitate the presentation

to an observant spectator, with particular

care and interest.

As the idea became familiar to me, it gradually shaped itself into its

present form.  Throughout its execution, it has had complete possession

of me; I have so far verified what

is done and suffered in these pages,

as that I have certainly done and suffered it all myself.

Whenever any reference (however slight) is made here to the condition

of the French people before or during the Revolution, it is truly made,

on the faith of the most trustworthy

witnesses.  It has been one of my hopes to add

something to the popular and picturesque means of

&quot;dickens.note&quot; 28 lines, 1122 characters</PRE>

<P>To move to the next paragraph, press } once:

<BR></P>

<PRE>A Tale of Two Cities

                                      Preface

When I was acting, with my children and friends, in Mr Wilkie Collins's

drama of The Frozen Deep, I first conceived the main idea of this

story.  A strong desire was upon me then, to

embody it in my own person;

and I traced out in my fancy, the state of mind of which it would

necessitate the presentation

to an observant spectator, with particular

care and interest.

As the idea became familiar to me, it gradually shaped itself into its

present form.  Throughout its execution, it has had complete possession

of me; I have so far verified what

is done and suffered in these pages,

as that I have certainly done and suffered it all myself.

Whenever any reference (however slight) is made here to the condition

of the French people before or during the Revolution, it is truly made,

on the faith of the most trustworthy

witnesses.  It has been one of my hopes to add

something to the popular and picturesque means of

&quot;dickens.note&quot; 28 lines, 1122 characters</PRE>

<P>Press the { key and you move right back to the beginning of the previous paragraph. In fact, you can easily fly back and forth in the file by using sequences of } (or a numeric repeat prefix like 2} to get there faster).

<BR></P>

<P>These two motion commands are helpful when you're working with stories, articles, or letters. Anytime you're working with words rather than commands (as in the .exrc file), these commands are worth remembering.

<BR></P>

<P>By the way, try d) to delete a sentence, or c} to change an entire paragraph. Remember that you can always undo the changes with u if you haven't done anything else between the two events.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I20" NAME="I20">

<FONT SIZE=3><B>Access UNIX with </B><B>!</B>

<BR></FONT></A></CENTER></H4>

<P>This final section on vi introduces you to one of the most powerful, and least known, commands in the editor: the ! Escape-to-UNIX command. When prefaced with a colon (:!, for example), it enables you to run UNIX commands without leaving the editor. 
More importantly, the ! command itself, just like d and c, accepts address specifications and feeds that portion of text to the command, and then replaces that portion with the results of having run that command on the text.

<BR></P>

<P>You should still be in the dickens.intro file. Start by double-checking what files you have in your home directory. To do this, type :!, which moves the cursor to the bottom line:

<BR></P>

<PRE>of the French people before or during the Revolution, it is truly made,

on the faith of the most trustworthy

witnesses.  It has been one of my hopes to add

something to the popular and picturesque means of

:!_</PRE>

<P>Type ls -CF and press Return, as if you were at the % prompt in the command line:

<BR></P>

<PRE>of the French people before or during the Revolution, it is truly made,

on the faith of the most trustworthy

witnesses.  It has been one of my hopes to add

something to the popular and picturesque means of

<B>:!ls -CF</B>

Archives/          big.output         dickens.note       src/

InfoWorld/         bigfiles           keylime.pie        temp/

Mail/              bin/               newfile            tetme

News/              buckaroo           owl.c

OWL/               buckaroo.confused  sample

awkscript          demo               sample2

 [Hit any key to continue] _</PRE>

<P>Press Return and you're back in the editor. You have quickly checked what files you have in your home directory. (Your fileage may vary.)

<BR></P>

<P>Now for some real fun. Move back to the beginning of the first paragraph and add the text &quot;Chuck, here are my current files:&quot; to it. Press Return twice before using the Esc key to return to command mode:

<BR></P>

<PRE>A Tale of Two Cities

                                      Preface

Chuck, here are my current files:

_

When I was acting, with my children and friends, in Mr Wilkie Collins's

drama of The Frozen Deep, I first conceived the main idea of this

story.  A strong desire was upon me then, to</PRE>

<P>Notice that the cursor was moved up a line. You're now on a blank line, and the line following is also blank.

<BR></P>

<P>To feed the current line to the UNIX system and replace it with the output of the command, vi offers an easy shortcut: !!. As soon as you type the second ! (or, more precisely, once vi figures out the desired range specified for this command), the 
cursor moves to the bottom of the screen and prompts with a single ! character:

<BR></P>

<PRE>of the French people before or during the Revolution, it is truly made,

on the faith of the most trustworthy

witnesses. It has been one of my hopes to add

something to the popular and picturesque means of

!_</PRE>

<P>To list all the files in your directory, again type ls -CF and press Return. After a second, vi adds the output of that command to the file:

<BR></P>

<PRE>A Tale of Two Cities

                                      Preface

Chuck, here are my current files:

Archives/               bigfiles                newfile

InfoWorld/              bin/                    owl.c

Mail/                   buckaroo                sample

News/                   buckaroo.confused       sample2

OWL/                    demo                    src/

awkscript               dickens.note            temp/

big.output              keylime.pie             tetme

When I was acting, with my children and friends, in Mr Wilkie Collins's

drama of The Frozen Deep, I first conceived the main idea of this

story.  A strong desire was upon me then, to

embody it in my own person;

and I traced out in my fancy, the state of mind of which it would

necessitate the presentation

to an observant spectator, with particular

care and interest.

As the idea became familiar to me, it gradually shaped itself into its

present form.  Throughout its execution, it has had complete possession

6 more lines</PRE>

<P>Notice that this time that the status on the bottom indicates how many lines were added to the file.

<BR></P>

<P>Press u to undo this change. Notice that the vi status indicator on the bottom line says there are now six fewer lines.

<BR></P>

<P>Move back to the &quot;W&quot; in &quot;When.&quot; You are now ready to learn one of the most useful commands in vi. This command gives you the ability to hand a paragraph of text to an arbitrary UNIX command.

<BR></P>

<P>This time, use a sed command, sed 's/^/&gt; /', which prefaces each line with &gt;. Ready? This is where the } command comes in handy, too. To accomplish this trick, type !}, moving the cursor to the bottom of the screen. Then type the sed command as 
you saw earlier: sed 's/^/&gt; /'. Pressing Return feeds the lines to sed. The sed command makes the change indicated and replaces those lines with the output of the sed command. Voil&#224;! The screen now looks like this:

<BR></P>

<PRE>A Tale of Two Cities

                                      Preface

Chuck, here are my current files:

&gt; When I was acting, with my children and friends, in Mr Wilkie Collins's

&gt; drama of The Frozen Deep, I first conceived the main idea of this

&gt; story.  A strong desire was upon me then, to

&gt; embody it in my own person;

&gt; and I traced out in my fancy, the state of mind of which it would

&gt; necessitate the presentation

&gt; to an observant spectator, with particular

&gt; care and interest.

As the idea became familiar to me, it gradually shaped itself into its

present form.  Throughout its execution, it has had complete possession

of me; I have so far verified what

is done and suffered in these pages,

as that I have certainly done and suffered it all myself.

Whenever any reference (however slight) is made here to the condition

of the French people before or during the Revolution, it is truly made,

!sed 's/^/&gt; /'</PRE>

<P>Here are a few more examples of ways to interact with UNIX while within vi. First, you don't really want the prefix to each line, so choose u to undo the change.

<BR></P>

<P>You want the system to actually tighten up the lines, ensuring that a reasonable number of words occur on each line without any lines being too long. On the majority of systems, there is a command called either fmt or adjust to accomplish this. To 
figure out which works on your system, simply use the :! command and feed a word or two to the fmt command to see what happens:

<BR></P>

<PRE>Whenever any reference (however slight) is made here to the condition

of the French people before or during the Revolution, it is truly made,

<B>:!echo hi | fmt</B>

[No write since last change]

hi

 [Hit any key to continue] _</PRE>

<P>In this case, fmt worked as expected, so you can be sure that the command exists on your system. If the response was command unknown, adjust is a likely synonym. If neither exist, complain to your vendor!

<BR></P>

<P>Armed with this new command, you can try another variant of !}, this time by feeding the entire paragraph to the fmt command. You're still at the beginning of the word &quot;When&quot; in the text. When you type the command !}fmt, the paragraph is 
cleaned up, and the screen changes to this:

<BR></P>

<PRE>A Tale of Two Cities

                                      Preface

Chuck, here are my current files:

When I was acting, with my children and friends, in Mr Wilkie Collins's

drama of The Frozen Deep, I first conceived the main idea of this

story.  A strong desire was upon me then, to embody it in my own

person; and I traced out in my fancy, the state of mind of which it

would necessitate the presentation to an observant spectator, with

particular care and interest.

As the idea became familiar to me, it gradually shaped itself into its

present form.  Throughout its execution, it has had complete possession

of me; I have so far verified what

is done and suffered in these pages,

as that I have certainly done and suffered it all myself.

Whenever any reference (however slight) is made here to the condition

of the French people before or during the Revolution, it is truly made,

on the faith of the most trustworthy

witnesses.  It has been one of my hopes to add

2 fewer lines</PRE>

<P>Again, vi tells you that the number of lines in the file have changed as a result of the command. In this situation, tightening up the paragraph actually reduced it by two display lines, too.

<BR></P>

<P>This command is so helpful that you may want to have it bound to a specific key with the keymap command. A typical way to do this in an .exrc might be this:

<BR></P>

<PRE>:map ^P !}fmt^M</PRE>

<P>The ^M is what vi uses to record an Return keypress. (Remember that you need to use ^v beforehand.) With this defined in your .exrc, you can press ^p to format the current paragraph.

<BR></P>

<P>The awk command, discussed in Chapter 15, &quot;Awk, Awk,&quot; can easily be used to extract specific fields of information. This can be tremendously helpful in vi. Rather than continuing with the dickens.intro file, however, quit vi and create a new 
file containing some output from the ls command:

<BR></P>

<PRE>% <B>ls -CF</B>

Archives/          big.output         dickens.note       src/

InfoWorld/         bigfiles           keylime.pie        temp/

Mail/              bin/               newfile            tetme

News/              buckaroo           owl.c

OWL/               buckaroo.confused  sample

awkscript          demo               sample2

% ls -l a* b* &gt; listing</PRE>

<P>Now you can use vi listing to start the file with the output of the ls command:

<BR></P>

<PRE>-rw-rw&#151;&#151;  1 taylor        126 Dec  3 16:34 awkscript

-rw-rw&#151;&#151;  1 taylor       1659 Dec  3 23:26 big.output

-rw-rw&#151;&#151;  1 taylor        165 Dec  3 16:42 bigfiles

-rw-rw&#151;&#151;  1 taylor        270 Dec  4 15:09 buckaroo

-rw-rw&#151;&#151;  1 taylor        458 Dec  4 23:22 buckaroo.confused

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

~

&quot;listing&quot; 5 lines, 282 characters</PRE>

<P>It would be nice to use this as the basis for creating a shell script, which is just a series of commands that you might type to the shell directly, all kept neatly in a single file. A shell script can show you both the first and last few lines of each 

file, with the middle chopped out.

<BR></P>

<P>The commands you want to have occur for each file entry are these:

<BR></P>

<PRE>echo ==== filename ====

head -5 filename; echo ...size bytes...; tail -5 filename</PRE>

<P>Do this with a combination of the ! command in vi and the awk program with the awk command:

<BR></P>

<PRE>awk '{ print &quot;echo ==== &quot;$8&quot; ====&quot;; print &quot;head &quot;$8&quot;; echo

...&quot;$4&quot; bytes...; tail &quot;$8}'</PRE>

<P>With the cursor on the very top line of this file, you can now press !G to pipe the entire file through the command. The cursor drops to the bottom of the screen. Type in the awk script shown previously and press Return. The result is this:

<BR></P>

<PRE>echo ==== awkscript ====

head -5 awkscript; echo ...126 bytes...; tail -5 awkscript

echo ==== big.output ====

head -5 big.output; echo ...1659 bytes...; tail -5 big.output

echo ==== bigfiles ====

head -5 bigfiles; echo ...165 bytes...; tail -5 bigfiles

echo ==== buckaroo ====

head -5 buckaroo; echo ...270 bytes...; tail -5 buckaroo

echo ==== buckaroo.confused ====

head -5 buckaroo.confused; echo ...458 bytes...; tail -5 buckaroo.confused~

~

~

~

~

~

~

~

~

~

~

~

~

<B>!awk '{ print &quot;echo ==== &quot;$8&quot; ====&quot;; print &quot;head &quot;$8&quot;; echo</B>

...&quot;$4&quot; bytes...; tail &quot;$8}'</PRE>

<P>If you now quit vi and ask sh to interpret the contents, here's what happens:

<BR></P>

<PRE>% <B>chmod +x listing</B>

%<B> sh listing</B>

==== awkscript ====

{

        count[length($1)]++

}

END {

        for (i=1; i &lt; 9; i++)

...126 bytes...

}

END {

        for (i=1; i &lt; 9; i++)

          print &quot;There are &quot; counti &quot; accounts with &quot; i &quot; letter names.&quot;

}

==== big.output ====

leungtc  ttyrV   Dec  1 18:27   (magenta)

tuyinhwa ttyrX   Dec  3 22:38   (expert)

hollenst ttyrZ   Dec  3 22:14   (dov)

brandt   ttyrb   Nov 28 23:03   (age)

holmes   ttyrj   Dec  3 21:59   (age)

...1659 bytes...

buckeye  ttyss   Dec  3 23:20   (mac2)

mtaylor  ttyst   Dec  3 23:22   (dov)

look     ttysu   Dec  3 23:12   (age)

janitor  ttysw   Dec  3 18:29   (age)

ajones   ttysx   Dec  3 23:23   (rassilon)

==== bigfiles ====

12556   keylime.pie

8729    owl.c

1024    Mail/

582     tetme

512     temp/

...165 bytes...

512     Archives/

207     sample2

199     sample

126     awkscript

==== buckaroo ====

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

...270 bytes...

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

==== buckaroo.confused ====

        Excerpt from &quot;Buckaroo Bandura&quot; by Duke MacRauch

I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Bandura.&quot;

...458 bytes...

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

Go Team Bandura! Go Team Bandura! Go Team Bandura!

%</PRE>

<P>Clearly the ! command opens up vi to work with the rest of the UNIX system. There's almost nothing that you can't do within the editor, whether it's add or remove prefixes, clean up text, or even show what happens when you try to run a command or 
reformat a passage within the current file. Remember, you can run spell without leaving vi, too. Be careful, though, because spell will replace the entire contents of your file with the list of words it doesn't know. Fortunately, u can solve that problem.

<BR></P>

<P>A summary of the commands you have learned in this section is shown in Table 7.3.

<BR></P>

<UL>

<LH><B>Table 7.3. Advanced </B><B>vi</B><B> commands.</B>

<BR></LH></UL>

<TABLE BORDER>

<TR>

<TD>

<PRE><I>Command</I>

<BR></PRE>

<TD>

<PRE><I>Meaning</I>

<BR></PRE>

<TR>

<TD>

<P>!!</P>

<TD>

<P>Replace current line with output of UNIX command.</P>

<TR>

<TD>

<P>!}</P>

<TD>

<P>Replace current paragraph with the results of piping it through the specified UNIX program or programs.</P>

<TR>

<TD>

<P> (</P>

<TD>

<P>Move backward one sentence.</P>

<TR>

<TD>

<P>)</P>

<TD>

<P>Move forward one sentence.</P>

<TR>

<TD>

<P>C</P>

<TD>

<P>Change text through the end of line.</P>

<TR>

<TD>

<P>c</P>

<TD>

<P>Change text in the specified range&#151;cw changes the following word, whereas c} changes the next paragraph.</P>

<TR>

<TD>

<P>e</P>

<TD>

<P>Move to the end of the current word.</P>

<TR>

<TD>

<P>^g</P>

<TD>

<P>Show current line number and other information about the file.</P>

<TR>

<TD>

<P>R</P>

<TD>

<P>Replace text until Esc.</P>

<TR>

<TD>

<P>r</P>

<TD>

<P>Replace the current character with the next pressed.</P>

<TR>

<TD>

<P>^v</P>

<TD>

<P>Prevent vi from interpreting the next character.</P>

<TR>

<TD>

<P>{</P>

<TD>

<P>Move backward one paragraph.</P>

<TR>

<TD>

<P>}</P>

<TD>

<P>Move forward one paragraph.</P>

<TR>

<TD>

<P>:!</P>

<TD>

<P>Invoke specified UNIX command.</P>

<TR>

<TD>

<P>:ab a bcd</P>

<TD>

<P>Define abbreviation a for phrase bcd.</P>

<TR>

<TD>

<P>:ab</P>

<TD>

<P>Show current abbreviations, if any.</P>

<TR>

<TD>

<P>:map a bcd</P>

<TD>

<P>Map key a to the vi commands bcd.</P>

<TR>

<TD>

<P>:map</P>

<TD>

<P>Show current key mappings, if any.</P>

<TR>

<TD>

<P>:s/old/new/</P>

<TD>

<P>Substitute new for old on the current line.</P>

<TR>

<TD>

<P>:s/old/new/g</P>

<TD>

<P>Substitute new for all occurrences of old on the current line.</P>

<TR>

<TD>

<P>:1,$s/old/new/g</P>

<TD>

<P>Substitute new for all occurrences of old.</P>

<TR>

<TD>

<P>:set nonumber</P>

<TD>

<P>Turn off line numbering.</P>

<TR>

<TD>

<P>:set number</P>

<TD>

<P>Turn on line numbering.</P></TABLE>

<P>Clearly, vi is a very complex and sophisticated tool, allowing you to not only modify your text files but also customize the editor for your keyboard. Just as important, you can access all the power of UNIX while within vi.

<BR></P>

<P>With this section and the last, you now know more about vi than the vast majority of people using UNIX today. There's a second popular editor, however; one that is modeless and that offers its own interesting possibilities for working with files and the 

UNIX system. It's called EMACS, and if you have it on your system, it's definitely worth a look.

<BR></P>

<H3 ALIGN="CENTER">

<CENTER><A ID="I21" NAME="I21">

<FONT SIZE=4><B>The EMACS Editor</B>

<BR></FONT></A></CENTER></H3>

<P>The only screen-oriented editor that's guaranteed to be included with the UNIX system is vi, but that doesn't mean that it's the only good editor available. An alternative editor that has become quite popular in the last decade (remember that UNIX is 
almost twenty-five years old) is called EMACS. This section teaches you the fundamentals of this powerful editing environment.

<BR></P>

<P>Remember that EMACS is modeless, so be prepared for an editor that is quite unlike vi. Because it's modeless, there's no insert or command mode. The result is that you have ample opportunity to use the Ctrl key.

<BR></P>

<HR ALIGN=CENTER>

<NOTE>

<IMG SRC="note.gif" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/note.gif" WIDTH = 35 HEIGHT = 35><B>NOTE:</B> Over the years, I have tried to become an EMACS enthusiast, once even forcing myself to use it for an entire month. I had crib sheets of commands taped up all over my office. At the end of the month, 

I was able to edit almost half as fast as I could in vi, which I've used thousands of times in the past fourteen years that I've worked in UNIX. I think EMACS has a lot going for it, and generally I think that modeless software is better than modal 
software. The main obstacle I see for EMACS is that it's begging for pull-down menus like those in a Mac or Windows program. Using Ctrl, Meta, Shift+Meta, and other weird key combinations just isn't as easy for me. On the other hand, your approach to 
editing may be different, and you may not have years of vi experience affecting your choice of editing environments. I encourage you to give EMACS a fair shake by working through all the examples I have included. You may find it matches your working style 

better than vi.

<BR></NOTE>

<HR ALIGN=CENTER>

<H4 ALIGN="CENTER">

<CENTER><A ID="I22" NAME="I22">

<FONT SIZE=3><B>Launching EMACS and Inserting Text</B>

<BR></FONT></A></CENTER></H4>

<P>Starting EMACS is as simple as starting any other UNIX program. Simply type the name of the program, followed by any file or files you'd like to work with. The puzzle with EMACS is figuring out what it's actually called on your system, if you even have 

it.

<BR></P>

<P>Once in EMACS, it's important to take a look at your computer keyboard. EMACS requires you to use not just the Ctrl key, but another key known as the Meta key, a sort of alternative Ctrl key. If you have a key labelled Meta or Alt on your keyboard, 
that's the one. If, like me, you don't, press Esc every time a Meta key is indicated.

<BR></P>

<P>Because there are both Ctrl and Meta keys in EMACS, the notation for indicating commands is slightly different. Throughout this chapter, a control key sequence has been shown either as Ctrl+F or ^f. EMACS people write this differently to allow for the 
difference between the Ctrl and Meta keys. In EMACS notation, ^f is shown as C-f, where C- always means Ctrl. Similarly, M-x is the Meta key plus x. If you don't have a Meta key, the sequence is Esc, followed by x. Finally, some arcane commands involve 
both the Ctrl and Meta keys being pressed simultaneously with the other key involved. The notation is C-M-x. This indicates that you need to either press and hold down both the Ctrl and Meta keys while pressing x, or, if you don't have a Meta (or Alt) key, 

press Esc followed by C-x.

<BR></P>

<P>With this notation in mind, leave EMACS by pressing C-x C-c (Ctrl+X, followed by Ctrl+C).

<BR></P>

<P>First, see if your system has EMACS available. The easiest way to find out is to type emacs at the command line and see what happens.

<BR></P>

<PRE>% <B>emacs</B>

emacs: Command not found.

%</PRE>

<P>This is a good indication that EMACS isn't available. If your command worked and you now are in the EMACS editor, move down to step 2.

<BR></P>

<P>A popular version of EMACS, called GNU EMACS, comes from the Free Software Foundation. To see if you have this version, type gnuemacs or gnumacs at the command line.

<BR></P>

<P>If this fails to work, you can try one more command before you accept that EMACS isn't part of your installation of UNIX. Online documentation for UNIX is accessible through the man command. The actual database of documents also includes a primitive but 

helpful keyword search capability, accessible by specifying the -k option (for keyword searches) at the command line. To find out if you have EMACS, enter the following:

<BR></P>

<PRE>% <B>man -k emacs</B>

gnuemacs (1l)   - GNU project Emacs

%</PRE>

<P>This indicates that GNU EMACS is on the system and can be started by entering gnuemacs at the command line.

<BR></P>

<P>Rather than start with a blank screen, quit the program (C-x C-c) and restart EMACS with one of the earlier test files, dickens.note:

<BR></P>

<PRE>% gnuemacs dickens.note

_                              A Tale of Two Cities

                                      Preface

When I was acting, with my children and friends, in Mr Wilkie Collins's

drama of The Frozen Deep, I first conceived the main idea of this

story. A strong desire was upon me then, to

embody it in my own person;

and I traced out in my fancy, the state of mind of which it would

necessitate the presentation

to an observant spectator, with particular

care and interest.

As the idea became familiar to me, it gradually shaped itself into its

present form. Throughout its execution, it has had complete possession

of me; I have so far verified what

is done and suffered in these pages,

as that I have certainly done and suffered it all myself.

Whenever any reference (however slight) is made here to the condition

of the French people before or during the Revolution, it is truly made,

on the faith of the most trustworthy

witnesses. It has been one of my hopes to add

&#151;&#151;Emacs: dickens.note           (Fundamental)&#151;&#151;Top&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;-</PRE>

<P>As you can see, it's quite different from the display shown when vi starts up. The status line at the bottom of the display offers useful information as you edit the file at different points. It also displays the name of the file at all times, a feature 

that can be surprisingly helpful. EMACS can work with different kinds of files. Here you see by the word &quot;Fundamental&quot; in the status line that EMACS is prepared for a regular text file. If you're programming, EMACS can offer special features 
customized for your particular language.

<BR></P>

<P>Quit EMACS by using the C-x C-c sequence, but let a few seconds pass after you press C-x to see what happens. When you press C-x, the bottom of the screen suddenly changes to this:

<BR></P>

<PRE>on the faith of the most trustworthy

witnesses. It has been one of my hopes to add

&#151;&#151;Emacs: dickens.note           (Fundamental)&#151;&#151;Top&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;

C-x-</PRE>

<P>Confusingly, the cursor remains at the top of the file, but EMACS reminds you that you've pressed C-x and that you need to enter a second command once you've decided what to do. Press C-c and immediately exit EMACS.

<BR></P>

<P>Already you can see there are some dramatic differences between EMACS and vi. If you're comfortable with multiple key sequences like C-x C-c to quit, you're going to enjoy learning EMACS. If not, stick with it anyway. Even if you never use EMACS, it's 
good to know a little bit about it.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I23" NAME="I23">

<FONT SIZE=3><B>How to Move Around in a File</B>

<BR></FONT></A></CENTER></H4>

<P>Files are composed of characters, words, lines, sentences, and paragraphs, and EMACS has commands to help you move around in them. Most systems have the arrow keys enabled, which means you won't need some of the key sequences, but it's best to know them 

all anyway.

<BR></P>

<P>The most basic motions are C-f and C-b, which are used to move the cursor forward and backward one character, respectively. Switch those to the Meta command equivalents and the cursor will move word by word: M-f moves the cursor forward a word and M-b 
moves it back a word. Pressing C-n moves the cursor to the next line, C-p moves it to the previous line, C-a moves it to the beginning of the line, and C-e moves it to the end of the line. (The vi equivalents for these are l, h, w, and b for moving forward 

and backward a character or word; j and k for moving up or down a line; and 0 or $ to move to the beginning or end of the current line. Which makes more sense to you?)

<BR></P>

<P>To move forward a sentence you can use M-e, which actually moves the cursor to the end of the sentence. Pressing M-a moves it to the beginning of the sentence. Notice the parallels between Ctrl and Meta commands: C-a moves the cursor to the beginning of 

the line, and M-a moves it to the beginning of the sentence.

<BR></P>

<P>Scrolling within the document is accomplished by using C-v to move forward a screen and M-v to move back a screen. To move forward a page (usually 60 lines of text; this is based on a printed page of information), you can use either C-x ] or C-x [ for 
forward or backward motion, respectively.

<BR></P>

<P>Finally, to move to the very top of the file, use M-&lt;, and to move to the bottom, use M-&gt;.

<BR></P>

<P>Go back into EMACS and locate the cursor. It should be at the very top of the screen:

<BR></P>

<PRE>        _                              A Tale of Two Cities

                                      Preface

When I was acting, with my children and friends, in Mr Wilkie Collins's

drama of The Frozen Deep, I first conceived the main idea of this

story. A strong desire was upon me then, to

embody it in my own person;

and I traced out in my fancy, the state of mind of which it would

necessitate the presentation

to an observant spectator, with particular

care and interest.

As the idea became familiar to me, it gradually shaped itself into its

present form. Throughout its execution, it has had complete posession

of me; I have so far verified what

is done and suffered in these pages,

as that I have certainly done and suffered it all myself.

Whenever any reference (however slight) is made here to the condition

of the French people before or during the Revolution, it is truly made,

on the faith of the most trustworthy

witnesses. It has been one of my hopes to add

&#151;&#151;Emacs: dickens.note           (Fundamental)&#151;&#151;Top&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;-</PRE>

<P>Move down four lines by using C-n four times. You should now be sitting on the &quot;d&quot; in &quot;drama&quot;:

<BR></P>

<PRE>Preface

When I was acting, with my children and friends, in Mr Wilkie Collins's

[d]rama of The Frozen Deep, I first conceived the main idea of this

story. A strong desire was upon me then, to

embody it in my own person;

and I traced out in my fancy, the state of mind of which it would</PRE>

<P>Next, move to the end of this sentence by using the M-e command (just like vi, EMACS expects two spaces to separate sentences):

<BR></P>

<PRE>When I was acting, with my children and friends, in Mr Wilkie Collins's

drama of The Frozen Deep, I first conceived the main idea of this

story._ A strong desire was upon me then, to

embody it in my own person;

and I traced out in my fancy, the state of mind of which it would</PRE>

<P>Now type in the following text: I fought the impulse to write this novel vociferously, but, dear reader, I felt the injustice of the situation too strongly in my breast to deny. Don't press Return or Esc when you're done. The screen should now look 
similar to this:

<BR></P>

<PRE>drama of The Frozen Deep, I first conceived the main idea of this

story. I fought the impulse to write this novel vociferously, but, dear reader,\

 I felt 

the injustice of the situation too strongly in my breast to deny_  A strong des\

ire was upon me then, to

embody it in my own person;

and I traced out in my fancy, the state of mind of which it would

necessitate the presentation</PRE>

<P>You can see that EMACS wrapped the line when it became too long (between the words &quot;felt&quot; and &quot;the&quot;), and because the lines are still too long to display, a few of them end with a backslash. The backslash isn't actually a part of the 

file; with it, EMACS is telling you that those lines are longer than you might expect.

<BR></P>

<P>Now try to move back a few letters by pressing Backspace.

<BR></P>

<P>Uh-oh! If your system is like mine, the Backspace key doesn't move the cursor back a letter at all. Instead it starts the EMACS help system, where you're suddenly confronted with a screen that looks like this:

<BR></P>

<PRE>You have typed C-h, the help character. Type a Help option:

A  command-apropos.  Give a substring, and see a list of commands

              (functions interactively callable) that contain

              that substring. See also the  apropos  command.

B  dEscribe-bindings. Display table of all key bindings.

C  dEscribe-key-briefly. Type a command key sequence;

              it prints the function name that sequence runs.

F  dEscribe-function. Type a function name and get documentation of it.

I  info. The  info  documentation reader.

K  dEscribe-key. Type a command key sequence;

              it displays the full documentation.

L  view-lossage. Shows last 100 characters you typed.

M  dEscribe-mode. Print documentation of current major mode,

              which dEscribes the commands peculiar to it.

N  view-emacs-news. Shows emacs news file.

S  dEscribe-syntax. Display contents of syntax table, plus explanations

T  help-with-tutorial. Select the Emacs learn-by-doing tutorial.

V  dEscribe-variable. Type name of a variable;

              it displays the variable's documentation and value.

W  where-is. Type command name; it prints which keystrokes

              invoke that command.

&#151;**-Emacs: *Help*                 (Fundamental)&#151;&#151;Top&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;-

A B C F I K L M N S T V W C-c C-d C-n C-w or Space to scroll: _</PRE>

<P>To escape the help screen, press Esc. Your screen should be restored. Notice that the filename has been changed and is now shown as *Help* instead of the actual file. The status line also shows what file you're viewing, but you aren't always viewing the 

file you want to work with.

<BR></P>

<P>The correct keys to move the cursor back a few characters are C-b. Use them to back up. Then use C-f to move forward again to the original cursor location.

<BR></P>

<P>Check that the last few lines of the file haven't changed by using the EMACS move-to-end-of-file command M-&gt;. (Think of file redirection to remember the file motion commands). Now the screen looks like this:

<BR></P>

<PRE>Whenever any reference (however slight) is made here to the condition

of the French people before or during the Revolution, it is truly made,

on the faith of the most trustworthy

witnesses. It has been one of my hopes to add

something to the popular and picturesque means of

understanding that terrible time, though no one can hope

to add anything to the philosophy of Mr Carlyle's wonderful book.

Tavistock House

November 1859

_

&#151;**-Emacs: dickens.note           (Fundamental)&#151;&#151;Bot&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;-</PRE>

<P>Changing the words of Charles Dickens was fun, so save these changes and quit. If you try to quit the program with C-x C-c, EMACS reminds you that there are unsaved changes:

<BR></P>

<PRE>&#151;**-Emacs: dickens.note           (Fundamental)&#151;&#151;Bot&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;-

Save file /users/taylor/dickens.note? (y or n)  _</PRE>

<P>Pressing y saves the changes, and n quits without saving the changes. If you instead decide to return to the edit session, Esc cancels the action entirely. Pressing n reminds you a second time that the changes are going to be lost if you don't save 
them.

<BR></P>

<PRE>&#151;**-Emacs: dickens.note           (Fundamental)&#151;&#151;Bot&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;-

Modified buffers exist; exit anyway? (yes or no)  _</PRE>

<P>This time type yes and, finally, you're back on the command line.

<BR></P>

<P>Entering text in EMACS is incredibly easy. It's as if the editor is always in insert mode. The price that you pay for this, however, is that just about anything else you do requires Ctrl or Meta sequences: even the Backspace key did something other than 

what you wanted. (You could fix the problem with key mapping so that pressing that key results in a C-b command, but then you couldn't get to the help information.)

<BR></P>

<P>The motion commands are summarized in Table 7.4.

<BR></P>

<UL>

<LH><B>Table 7.4. EMACS motion commands.</B>

<BR></LH></UL>

<TABLE BORDER>

<TR>

<TD>

<PRE><I>Command</I>

<BR></PRE>

<TD>

<PRE><I>Meaning</I>

<BR></PRE>

<TR>

<TD>

<P>M-&gt;</P>

<TD>

<P>Move to end of file.</P>

<TR>

<TD>

<P>M-&lt;</P>

<TD>

<P>Move to beginning of file.</P>

<TR>

<TD>

<P>C-v</P>

<TD>

<P>Move forward a screen.</P>

<TR>

<TD>

<P>M-v</P>

<TD>

<P>Move backward a screen.</P>

<TR>

<TD>

<P>C-x ]</P>

<TD>

<P>Move forward a page.</P>

<TR>

<TD>

<P>C-x [</P>

<TD>

<P>Move backward a page.</P>

<TR>

<TD>

<P>C-n</P>

<TD>

<P>Move to the next line.</P>

<TR>

<TD>

<P>C-p</P>

<TD>

<P>Move to the previous line.</P>

<TR>

<TD>

<P>C-a</P>

<TD>

<P>Move to the beginning of the line.</P>

<TR>

<TD>

<P>C-e</P>

<TD>

<P>Move to the end of the line.</P>

<TR>

<TD>

<P>M-e</P>

<TD>

<P>Move to the end of the sentence.</P>

<TR>

<TD>

<P>M-a</P>

<TD>

<P>Move to the beginning of the sentence.</P>

<TR>

<TD>

<P>C-f</P>

<TD>

<P>Move forward a character.</P>

<TR>

<TD>

<P>C-b</P>

<TD>

<P>Move backward a character.</P>

<TR>

<TD>

<P>M-f</P>

<TD>

<P>Move forward a word.</P>

<TR>

<TD>

<P>M-b</P>

<TD>

<P>Move backward a word.</P></TABLE>

<H4 ALIGN="CENTER">

<CENTER><A ID="I24" NAME="I24">

<FONT SIZE=3><B>How to Delete Characters and Words</B>

<BR></FONT></A></CENTER></H4>

<P>Inserting text into an EMACS buffer is quite simple, and once you get the hang of it, moving about in the file isn't too bad either. How about deleting text? The series of Ctrl and Meta commands that allow you to insert text are a precursor to all 
commands in EMACS, and it should come as no surprise that C-d deletes the current character, M-d deletes the next word, M-k deletes the rest of the current sentence, and C-k deletes the rest of the current line. If you have a key on your keyboard labeled 
DEL, RUBOUT, or Delete, you're in luck, because DEL deletes the previous character, M-DEL deletes the previous word, and C-x DEL deletes the previous sentence.

<BR></P>

<P>I have a Delete key, but it's tied to the Backspace function on my system. Every time I press it, it actually sends a C-h sequence to the system, not the DEL sequence. The result is that I cannot use any of these backwards deletion commands.

<BR></P>

<P>Restart EMACS with the dickens.note file and move the cursor to the middle of the fifth line (remember, C-n moves to the next line, and C-f moves forward a character). It should look like this:

<BR></P>

<PRE>Preface

When I was acting, with my children and friends, in Mr Wilkie Collins's

drama of The Frozen Deep, I first conceived the main idea of this

story. A strong desire [w]as upon me then, to

embody it in my own person;

and I traced out in my fancy, the state of mind of which it would

necessitate the presentation

to an observant spectator, with particular</PRE>

<P>Notice that my cursor is on the &quot;w&quot; in &quot;was&quot; on the fifth line here.

<BR></P>

<P>Press C-d C-d C-d to remove the word &quot;was.&quot; Now simply type came to revise the sentence slightly. The screen should now look like this:

<BR></P>

<PRE>Preface

When I was acting, with my children and friends, in Mr Wilkie Collins's

drama of The Frozen Deep, I first conceived the main idea of this

story. A strong desire came_upon me then, to

embody it in my own person;

and I traced out in my fancy, the state of mind of which it would

necessitate the presentation

to an observant spectator, with particular</PRE>

<P>Now press DEL once to remove the last letter of the new word and press e to reinsert it. Instead of backing up a character at a time, instead use M-DEL to delete the word just added. The word is deleted, but the spaces on either side of the word are 
retained.

<BR></P>

<PRE>Preface

When I was acting, with my children and friends, in Mr Wilkie Collins's

drama of The Frozen Deep, I first conceived the main idea of this

story. A strong desire _upon me then, to

embody it in my own person;

and I traced out in my fancy, the state of mind of which it would

necessitate the presentation

to an observant spectator, with particular</PRE>

<P>Try another word to see if you can get this sentence to sound better. Type crept to see how it reads.

<BR></P>

<P>On the other hand, it's probably not good to revise classic stories like A Tale of Two Cities, so the best move is to delete this entire sentence. If you press C-x DEL, will it do the right thing? Remember, C-x DEL deletes the previous sentence. Press 
C-x DEL and the results are helpful, if not completely what you want to accomplish:

<BR></P>

<PRE>Preface

When I was acting, with my children and friends, in Mr Wilkie Collins's

drama of The Frozen Deep, I first conceived the main idea of this

story. _upon me then, to

embody it in my own person;

and I traced out in my fancy, the state of mind of which it would

necessitate the presentation

to an observant spectator, with particular</PRE>

<P>That's okay. Now you can delete the second part of the sentence by using the M-k command. Now the screen looks like what you want:

<BR></P>

<PRE>When I was acting, with my children and friends, in Mr Wilkie Collins's

drama of The Frozen Deep, I first conceived the main idea of this

story. _

As the idea became familiar to me, it gradually shaped itself into its

present form. Throughout its execution, it has had complete posession

of me; I have so far verified what</PRE>

<P>Here's a great feature of EMACS! You just realized that deleting sentences is just as wildly inappropriate as changing words, so you want to undo the last two changes. If you were using vi you'd be stuck, because vi remembers only the last change; but 
EMACS has that beat. With EMACS, you can back up as many changes as you'd like, usually until you restore the original file. To step backwards, use C-x u.

<BR></P>

<P>The first time you press C-x u, the screen changes to this:

<BR></P>

<PRE>When I was acting, with my children and friends, in Mr Wilkie Collins's

drama of The Frozen Deep, I first conceived the main idea of this

story. _upon me then, to

embody it in my own person;

and I traced out in my fancy, the state of mind of which it would

necessitate the presentation

to an observant spectator, with particular

care and interest.

As the idea became familiar to me, it gradually shaped itself into its

present form. Throughout its execution, it has had complete posession</PRE>

<P>The second time you press it, the screen goes even further back in your revision history:

<BR></P>

<PRE>When I was acting, with my children and friends, in Mr Wilkie Collins's

drama of The Frozen Deep, I first conceived the main idea of this

story. A strong desire crept_upon me then, to

embody it in my own person;

and I traced out in my fancy, the state of mind of which it would

necessitate the presentation

to an observant spectator, with particular

care and interest.

As the idea became familiar to me, it gradually shaped itself into its

present form. Throughout its execution, it has had complete posession</PRE>

<P>Finally, pressing C-x u three more times causes the original text to be restored:

<BR></P>

<PRE>A Tale of Two Cities

                                      Preface

When I was acting, with my children and friends, in Mr Wilkie Collins's

drama of The Frozen Deep, I first conceived the main idea of this

story. A strong desire [c]ame upon me then, to

embody it in my own person;

and I traced out in my fancy, the state of mind of which it would

necessitate the presentation

to an observant spectator, with particular

care and interest.

As the idea became familiar to me, it gradually shaped itself into its

present form. Throughout its execution, it has had complete posession

of me; I have so far verified what

is done and suffered in these pages,

as that I have certainly done and suffered it all myself.

Whenever any reference (however slight) is made here to the condition

of the French people before or during the Revolution, it is truly made,

on the faith of the most trustworthy

witnesses. It has been one of my hopes to add

&#151;**-Emacs: dickens.note           (Fundamental)&#151;&#151;Top&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;-

Undo!</PRE>

<P>Regrettably, if you don't have a DELETE key, some of the deletion commands will be unavailable to you. Generally, though, EMACS has as many ways to delete text as vi has, if not more. The best feature is that, unlike vi, EMACS remembers changes from the 

beginning of your editing session. You can always back up as far as you want by using the C-x u undo request.

<BR></P>

<P>The delete keys are summarized in Table 7.5.

<BR></P>

<UL>

<LH><B>Table 7.5. Deletion commands in EMACS.</B>

<BR></LH></UL>

<TABLE BORDER>

<TR>

<TD>

<PRE><I>Command</I>

<BR></PRE>

<TD>

<PRE><I>Meaning</I>

<BR></PRE>

<TR>

<TD>

<P>DEL</P>

<TD>

<P>Delete the previous character.</P>

<TR>

<TD>

<P>C-d</P>

<TD>

<P>Delete the current character.</P>

<TR>

<TD>

<P>M-DEL</P>

<TD>

<P>Delete the previous word.</P>

<TR>

<TD>

<P>M-d</P>

<TD>

<P>Delete the next word.</P>

<TR>

<TD>

<P>C-x DEL</P>

<TD>

<P>Delete the previous sentence.</P>

<TR>

<TD>

<P>M-k</P>

<TD>

<P>Delete the rest of the current sentence.</P>

<TR>

<TD>

<P>C-k</P>

<TD>

<P>Delete the rest of the current line.</P>

<TR>

<TD>

<P>C-x u</P>

<TD>

<P>Undo the last edit change.</P></TABLE>

<H4 ALIGN="CENTER">

<CENTER><A ID="I25" NAME="I25">

<FONT SIZE=3><B>Search and Replace in EMACS</B>

<BR></FONT></A></CENTER></H4>

<P>Because EMACS reserves the last line of the screen for its own system prompts, searching and replacing is easier than in vi. Moreover, the system prompts for the fields and asks, for each occurrence, whether to change it or not. On the other hand, this 

command isn't a simple key press or two, but rather it is an example of a named EMACS command.

<BR></P>

<P>Searching forward for a pattern is done by pressing C-s and searching backwards with C-r (the mnemonics are search forward and reverse search). To leave the search once you've found what you want, press Esc. To cancel the search, returning to your 
starting point, use C-g.

<BR></P>

<HR ALIGN=CENTER>

<NOTE>

<IMG SRC="warning.gif" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/warning.gif" WIDTH = 37 HEIGHT = 35><B>WARNING:</B> Unfortunately, you might find that pressing C-s does very strange things to your system. In fact, ^s and ^q are often used as flow control on a terminal, and by pressing the C-s key, you're 
actually telling the terminal emulator to stop sending information until it sees a C-q. If this happens to you, you need to try to turn off XON/XOFF flow control. Ask your system administrator for help.

<BR></NOTE>

<HR ALIGN=CENTER>

<P>Query and replace is really a whole new feature within EMACS. To start a query and replace, use M-x query-replace. EMACS will prompt for what to do next. Once a match is shown, you can type a variety of different commands to affect what happens: y makes 

the change; n means to leave it as is, but move to the next match; Esc or q quits replace mode; and ! automatically replaces all further occurrences of the pattern without further prompting.

<BR></P>

<P>You're still looking at the dickens.note file, and you have moved the cursor to the top-left corner by using M-&lt;. Somewhere in the file is the word &quot;Revolution,&quot; but you're not sure where. Worse, every time you press C-s, the terminal 
freezes up until you press C-q because of flow control problems. Instead of searching forward, search backward by moving the cursor to the bottom of the file with M-&gt; and then pressing C-r.

<BR></P>

<PRE>&#151;&#151;Emacs: dickens.note           (Fundamental)&#151;&#151;Bot&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;

<BR>I-search backward:</PRE>

<P>As you type each character of the pattern Revolution, the cursor dances backward, matching the pattern as it grows longer and longer, until EMACS finds the word you seek:

<BR></P>

<PRE>Whenever any reference (however slight) is made here to the condition

of the French people before or during the [R]evolution, it is truly made,

on the faith of the most trustworthy

witnesses. It has been one of my hopes to add

something to the popular and picturesque means of

understanding that terrible time, though no one can hope

to add anything to the philosophy of Mr Carlyle's wonderful book.

Tavistock House

November 1859

&#151;&#151;Emacs: dickens.note           (Fundamental)&#151;&#151;Bot&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;-

I-search backward: <B>Revol</B></PRE>

<P>Now try the query-replace feature. Move to the top of the file with M-&lt;, and then type in M-x, which causes the notation to show up on the bottom status line:

<BR></P>

<PRE>of the French people before or during the Revolution, it is truly made,

on the faith of the most trustworthy

witnesses. It has been one of my hopes to add

&#151;**-Emacs: dickens.note           (Fundamental)&#151;&#151;Top&#129;97&#196;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;-

M-x _</PRE>

<P>Then type the words query-replace and press Return. EMACS understands that you want to find all occurrences of a pattern and replace them with another. EMACS changes the prompt to this:

<BR></P>

<PRE>of the French people before or during the Revolution, it is truly made,

on the faith of the most trustworthy

witnesses. It has been one of my hopes to add

&#151;**-Emacs: dickens.note           (Fundamental)&#151;&#151;Top&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;-

Query replace: _</PRE>

<P>Now type in the word that you want to replace. To cause confusion in the file, change French to Danish. Maybe A Tale of Two Cities really takes place in London and Copenhagen! To do this, type French and press Return. The prompt again changes to this:

<BR></P>

<PRE>of the French people before or during the Revolution, it is truly made,

on the faith of the most trustworthy

witnesses. It has been one of my hopes to add

&#151;**-Emacs: dickens.note           (Fundamental)&#151;&#151;Top&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;-

Query replace French with: _</PRE>

<P>Enter Danish and again press Return.

<BR></P>

<PRE>as that I have certainly done and suffered it all myself.

Whenever any reference (however slight) is made here to the condition

of the French_people before or during the Revolution, it is truly made,

on the faith of the most trustworthy

witnesses. It has been one of my hopes to add

&#151;**-Emacs: dickens.note           (Fundamental)&#151;&#151;Top&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;-

Query replacing French with Danish:</PRE>

<P>It may not be completely obvious, but EMACS has found a match (immediately before the cursor) and is prompting you for what to do next. The choices here are summarized in Table 7.6.

<BR></P>

<UL>

<LH><B>Table 7.6. Options during query and replace.</B>

<BR></LH></UL>

<TABLE BORDER>

<TR>

<TD>

<PRE><I>Command</I>

<BR></PRE>

<TD>

<PRE><I>Meaning</I>

<BR></PRE>

<TR>

<TD>

<P>y</P>

<TD>

<P>Change this occurrence of the pattern.</P>

<TR>

<TD>

<P>n</P>

<TD>

<P>Don't change this occurrence, but look for another.</P>

<TR>

<TD>

<P>q</P>

<TD>

<P>Don't change. Leave query-replace completely (you can also use Esc for this function).</P>

<TR>

<TD>

<P>!</P>

<TD>

<P>Change this occurrence and all others in the file.</P></TABLE>

<P>Opt to make this change, and all other possible changes in the file, by pressing !. The screen changes to tell you that there were no more occurrences:

<BR></P>

<PRE>Whenever any reference (however slight) is made here to the condition

of the Danish_people before or during the Revolution, it is truly made,

on the faith of the most trustworthy

witnesses. It has been one of my hopes to add

&#151;**-Emacs: dickens.note           (Fundamental)&#151;&#151;Top&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;

Done</PRE>

<P>Searching in EMACS is awkward, due in particular to the flow control problems that you may incur because of your terminal. However, searching and replacing with the query-replace command is much better and more powerful than the vi alternative. Your 
assessment of EMACS all depends on what features you prefer.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I26" NAME="I26">

<FONT SIZE=3><B>Using the EMACS Tutorial and Help System</B>

<BR></FONT></A></CENTER></H4>

<P>Unlike vi and, indeed, most of UNIX, EMACS includes its own extensive built-in documentation and a tutorial to help you learn about using the package. As noted earlier, the entire help system is accessed by pressing C-h. Pressing C-h three times brings 

up the general help menu screen. There is also an information browser called info (accessed by pressing C-h i) and a tutorial system you can start by pressing C-h t.

<BR></P>

<P>EMACS enthusiasts insist that the editor is modeless, but in fact it does have modes of its own. You used one just now, the query-replace mode. To obtain help on the current mode that you're working in, you can use C-h m.

<BR></P>

<P>Press C-h C-h C-h, and the entire screen is replaced with this:

<BR></P>

<PRE>You have typed C-h, the help character. Type a Help option:

A  command-apropos.  Give a substring, and see a list of commands

              (functions interactively callable) that contain

              that substring. See also the  apropos  command.

B  dEscribe-bindings. Display table of all key bindings.

C  dEscribe-key-briefly. Type a command key sequence;

              it prints the function name that sequence runs.

F  dEscribe-function. Type a function name and get documentation of it.

I  info. The  info  documentation reader.

K  dEscribe-key. Type a command key sequence;

              it displays the full documentation.

L  view-lossage. Shows last 100 characters you typed.

M  dEscribe-mode. Print documentation of current major mode,

              which dEscribes the commands peculiar to it.

N  view-emacs-news. Shows emacs news file.

S  dEscribe-syntax. Display contents of syntax table, plus explanations

T  help-with-tutorial. Select the Emacs learn-by-doing tutorial.

V  dEscribe-variable. Type name of a variable;

              it displays the variable's documentation and value.

W  where-is. Type command name; it prints which keystrokes

              invoke that command.

&#151;**-Emacs: *Help*                 (Fundamental)&#151;&#151;Top&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;

A B C F I K L M N S T V W C-c C-d C-n C-w or Space to scroll: _</PRE>

<P>What now? There are actually 17 different options from this point, as shown in Table 7.7.

<BR></P>

<UL>

<LH><B>Table 7.7. EMACS help system command options.</B>

<BR></LH></UL>

<TABLE BORDER>

<TR>

<TD>

<PRE><I>Command</I>

<BR></PRE>

<TD>

<PRE><I>Meaning</I>

<BR></PRE>

<TR>

<TD>

<P>A</P>

<TD>

<P>List all commands matching the specified word.</P>

<TR>

<TD>

<P>B</P>

<TD>

<P>List all key mappings (EMACS calls them key bindings).</P>

<TR>

<TD>

<P>C</P>

<TD>

<P>DEscribe any key sequence pressed, instead of doing it.</P>

<TR>

<TD>

<P>F</P>

<TD>

<P>DEscribe the specified function.</P>

<TR>

<TD>

<P>I</P>

<TD>

<P>Start up the info browser.</P>

<TR>

<TD>

<P>K</P>

<TD>

<P>Fully dEscribe the result of a particular key sequence.</P>

<TR>

<TD>

<P>L</P>

<TD>

<P>Show the last 100 characters you typed.</P>

<TR>

<TD>

<P>M</P>

<TD>

<P>DEscribe the current mode you're in.</P>

<TR>

<TD>

<P>S</P>

<TD>

<P>List a command syntax table.</P>

<TR>

<TD>

<P>T</P>

<TD>

<P>Start the EMACS tutorial.</P>

<TR>

<TD>

<P>V</P>

<TD>

<P>Define and dEscribe the specified variable.</P>

<TR>

<TD>

<P>W</P>

<TD>

<P>Indicate what keystroke invokes a particular function.</P>

<TR>

<TD>

<P>C-c</P>

<TD>

<P>EMACS copyright and distribution information.</P>

<TR>

<TD>

<P>C-d</P>

<TD>

<P>EMACS ordering information.</P>

<TR>

<TD>

<P>C-n</P>

<TD>

<P>Recent EMACS changes.</P>

<TR>

<TD>

<P>C-w</P>

<TD>

<P>EMACS warranty.</P></TABLE>

<P>Choose K and then press M-&lt; to see what that command really does. The first thing that happens after you enter K is that the table of help information vanishes, to be replaced by the original text. Then the prompt appears along the bottom:

<BR></P>

<PRE>of the Danish_people before or during the Revolution, it is truly made,

on the faith of the most trustworthy

witnesses. It has been one of my hopes to add

&#151;**-Emacs: dickens.note           (Fundamental)&#151;&#151;Top&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;-

DEscribe key:-</PRE>

<P>Pressing M-&lt; brings up the desired information:

<BR></P>

<PRE>A Tale of Two Cities

                                      Preface

When I was acting, with my children and friends, in Mr Wilkie Collins's

drama of The Frozen Deep, I first conceived the main idea of this

story. A strong desire came upon me then, to

embody it in my own person;

and I traced out in my fancy, the state of mind of which it would

necessitate the presentation

to an observant spectator, with particular

&#151;&#151;Emacs: dickens.note~          (Fundamental)&#151;&#151;Top&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;-

beginning-of-buffer:

Move point to the beginning of the buffer; leave mark at previous position.

With arg N, put point N/10 of the way from the true beginning.

Don't use this in Lisp programs!

(goto-char (point-min)) is faster and does not set the mark.

&#151;&#151;Emacs: *Help*                 (Fundamental)&#151;&#151;All&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;

Type C-x 1 to remove help window.</PRE>

<P>A quick C-x 1 removes the help information when you're done with it.

<BR></P>

<P>There is a considerable amount of help available in the EMACS editor. If you're interested in learning more about this editor, the online tutorial is a great place to start. Try C-h t to start it and go from there.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I27" NAME="I27">

<FONT SIZE=3><B>Working with Other Files</B>

<BR></FONT></A></CENTER></H4>

<P>By this point it should be no surprise that there are about a million commands available within the EMACS editor, even though it can be a bit tricky to get to them. There are many file-related commands too, but this section focuses on just a few 
essential commands so you can get around in the program. The EMACS help system can offer lots more. (Try using C-h a file to find out what functions are offered in your version of the program.)

<BR></P>

<P>To add the contents of a file to the current edit buffer, use the command C-x i. It will prompt for a filename. Pressing C-x C-w prompts for a file to write the buffer into, rather than the default file. To save to the default file, use C-x C-s (that 
is, if you can: the C-s might again hang you up, just as it did when you tried to use it for searching). If that doesn't work, you can always use the alternative C-x s. To move to another file, use C-x C-f. (EMACS users never specify more than one filename 

on the command line. They use C-x C-f to move between files instead). What's nice is that when you use the C-x C-f command, you load the contents of that file into another buffer, so you can zip quickly between files by using the C-x b command to switch 
buffers.

<BR></P>

<P>Without leaving EMACS, press C-x C-f to read another file into the buffer. The system then prompts you as follows:

<BR></P>

<PRE>of the Danish people before or during the Revolution, it is truly made,

on the faith of the most trustworthy

witnesses. It has been one of my hopes to add

&#151;&#151;Emacs: dickens.note           (Fundamental)&#151;&#151;Top&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;

Find file: ~/ _</PRE>

<P>Type buckaroo and the editor opens up a new buffer, moving you to that file:

<BR></P>

<PRE> [I] found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

&#151;&#151;Emacs: buckaroo               (Fundamental)&#151;&#151;All&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;-</PRE>

<P>Now flip back to the other buffer with C-x b. When you enter that command, however, it doesn't automatically move you there. Instead it offers this prompt:

<BR></P>

<PRE>&#151;**-Emacs: buckaroo               (Fundamental)&#151;&#151;All&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;-

Switch to buffer: (default dickens.note) _</PRE>

<P>When you press ?, you receive a split screen indicating what the possible answers are:

<BR></P>

<PRE>I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

&#151;**-Emacs: buckaroo               (Fundamental)&#151;&#151;All&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;

Possible completions are:

*Buffer List*                      *Help*

*scratch*                          buckaroo

dickens.note

&#151;&#151;Emacs:  *Completions*         (Fundamental)&#151;&#151;All&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;

Switch to buffer: (default dickens.note) _</PRE>

<P>The default is okay, so press Return and go back to the Dickens file. One more C-x b; this time the default is buckaroo, so again press Return to move back.

<BR></P>

<P>You're in the buckaroo file, and you want to see what happens if you read dickens.note into this file. This is done easily. Move the cursor to the end of the file with M-&gt; and then press C-x i, answering dickens.note to the prompt Insert file: ~/. 
Pressing Return yields the following screen display:

<BR></P>

<PRE>I found myself stealing a peek at my own watch and overhead

General Catbird's

aide give him the latest.

&quot;He's not even here,&quot; went the conversation.

&quot;Banzai.&quot;

&quot;Where the hell is he?&quot;

&quot;At the hospital in El Paso.&quot;

&quot;What? Why weren't we informed? What's wrong with him?&quot;

                                A Tale of Two Cities

                                      Preface

When I was acting, with my children and friends, in Mr Wilkie Collins's

drama of The Frozen Deep, I first conceived the main idea of this

story. A strong desire came upon me then, to

embody it in my own person;

and I traced out in my fancy, the state of mind of which it would

necessitate the presentation

to an observant spectator, with particular

care and interest.

As the idea became familiar to me, it gradually shaped itself into its

present form. Throughout its execution, it has had complete posession

&#151;**-Emacs: buckaroo               (Fundamental)&#151;&#151;Top&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;-</PRE>

<P>It's time to quit and split. To do this, press C-x s and wait for an EMACS prompt or two. The first one displayed is this:

<BR></P>

<PRE>As the idea became familiar to me, it gradually shaped itself into its

present form. Throughout its execution, it has had complete posession

&#151;**-Emacs: buckaroo               (Fundamental)&#151;&#151;Top&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;

Save file /users/taylor/buckaroo? (y or n) _</PRE>

<P>Answer y to save this muddled file. It returns you to the top of the file, and a quick C-x C-c drops you back to the system prompt.

<BR></P>

<P>This has only scratched the surface of EMACS, a fantastically powerful editor. The best way to learn more is to work through the online tutorial in the editor or to peruse the information available in the help system.

<BR></P>

<P>You have now learned quite a bit about the EMACS editor. Some capabilities exceed those of the vi editor, and some are considerably more confusing. Which of these editors you choose is up to you, and your choice should be based on your own preferences 
for working on files. You should spend some time working with the editor you prefer to make sure you can create simple files and modify them without any problems.

<BR></P>

<H3 ALIGN="CENTER">

<CENTER><A ID="I28" NAME="I28">

<FONT SIZE=4><B>The </B><B>sed</B><B> Command</B>

<BR></FONT></A></CENTER></H3>

<P>In this section, you get to put on your programming hat and learn about a powerful command that can be customized infinitely and used for a wide variety of tasks. sed is a program for modifying information traveling through a UNIX pipeline.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I29" NAME="I29">

<FONT SIZE=3><B>Changing Things En Route with </B><B>sed</B>

<BR></FONT></A></CENTER></H4>

<P>I'm willing to bet that when you read about learning some UNIX programming tools in this section, you got anxious, your palms started to get sweaty, your fingers shook, and the little voice in your head said, &quot;It's too late! We can use a pad and 
paper! We don't need computers at all!&quot;

<BR></P>

<P>Don't panic.

<BR></P>

<P>If you think about it, you've been programming all along in UNIX. When you enter a command to the shell, you're programming the shell to immediately perform the task specified. When you specify file redirection or build a pipe, you're really writing a 
small UNIX program that the shell interprets and acts upon. Frankly, when you consider how many different commands you now know and how many different flags there are for each of those commands, you've got quite a set of programming tools under your belt 
already. So onward!

<BR></P>

<P>With a | symbol called a pipe, and commands tied together called pipelines, is it any wonder that the information flowing down a pipeline is called a stream? For example, the command cat test | wc means that the cat command opens the file test and 
streams it to the wc program, which counts the number of lines, words, and characters therein.

<BR></P>

<P>To modify the information in a pipeline, then, it seems reasonable to use a stream editor, and that's exactly what the sed command is! In fact, its name comes from its function: <B>s</B>tream <B>ed</B>itor.

<BR></P>

<P>Here's the bad news. The sed command is built on an old editor called ed, the same editor that's responsible for the grep command. Remember? The global/regular expression/print eventually became grep. A microcosm of UNIX itself, commands to sed are 
separated by a semicolon.

<BR></P>

<P>There are many different sed commands, but this section focuses on using sed to substitute one pattern for another and to extract ranges of lines from a file. The general format of the substitution command is: s/<I>old</I>/<I>new</I>/<I>flags</I>, where 

<I>old</I> and <I>new</I> are the patterns you're working with, s is the abbreviation for the substitute command, and the two most helpful flags are g (to replace all occurrences globally on each line) and n (to tell sed to replace only the first n 
occurrences of the pattern). By default, lines are listed to the screen, so a <I>sed</I> expression like 10q will cause the program to list the first 10 lines and then quit (making it an alternative to the command head -10). Deletion is similar: the 
command is prefaced by one or two addresses in the file, reflecting a request to delete either all lines that match the specified address or all in the range of first to last.

<BR></P>

<P>The format of the sed command is sed followed by the expression in quotes and, optionally, the name of the file to read for input.

<BR></P>

<P>Here's an easy example. Use grep to extract some lines from the /etc/passwd file and replace all colons with a single space. The format of this command is to substitute each occurrence of : with a space, or s/:/ /:

<BR></P>

<PRE>% <B>grep taylor /etc/passwd | sed -e 's/:/ /'</B>

taylorj ?:1048:1375:James Taylor:/users/taylorj:/bin/csh

mtaylor ?:769:1375:Mary Taylor:/users/mtaylor:/usr/local/bin/tcsh

dataylor ?:375:518:Dave Taylor,,,,:/users/dataylor:/usr/local/lib/msh

taylorjr ?:203:1022:James Taylor:/users/taylorjr:/bin/csh

taylorrj ?:662:1042:Robert Taylor:/users/taylorrj:/bin/csh

taylorm ?:869:1508:Melanie Taylor:/users/taylorm:/bin/csh

taylor ?:1989:1412:Dave Taylor:/users/taylor:/bin/csh</PRE>

<P>This doesn't quite do what you want. You neglected to append the global instruction to the sed command to ensure that it would replace all occurrences of the pattern on each line. Try it again, this time adding a g to the instruction.

<BR></P>

<PRE>% <B>grep taylor /etc/passwd | sed -e 's/:/ /g'</B>

taylorj ? 1048 1375 James Taylor /users/taylorj /bin/csh

mtaylor ? 769 1375 Mary Taylor /users/mtaylor /usr/local/bin/tcsh

dataylor ? 375 518 Dave Taylor /users/dataylor /usr/local/lib/msh

taylorjr ? 203 1022 James Taylor /users/taylorjr /bin/csh

taylorrj ? 662 1042 Robert Taylor /users/taylorrj /bin/csh

taylorm ? 869 1508 Melanie Taylor /users/taylorm /bin/csh

taylor ? 1989 1412 Dave Taylor /users/taylor /bin/csh</PRE>

<P>A more sophisticated example of substitution with sed is to modify names, replacing all occurrences of Taylor with Tailor:

<BR></P>

<PRE>% <B>grep taylor /etc/passwd | sed -e 's/Taylor/Tailor/g'</B>

taylorj:?:1048:1375:James Tailor:/users/taylorj:/bin/csh

mtaylor:?:769:1375:Mary Tailor:/users/mtaylor:/usr/local/bin/tcsh

dataylor:?:375:518:Dave Tailor:/users/dataylor:/usr/local/lib/msh

taylorjr:?:203:1022:James Tailor:/users/taylorjr:/bin/csh

taylorrj:?:662:1042:Robert Tailor:/users/taylorrj:/bin/csh

taylorm:?:869:1508:Melanie Tailor:/users/taylorm:/bin/csh

taylor:?:1989:1412:Dave Tailor:/users/taylor:/bin/csh</PRE>

<P>The colons have returned, which is annoying. Use the fact that a semicolon can separate multiple sed commands on the same line and try it one more time:

<BR></P>

<PRE>% <B>grep taylor /etc/passwd | sed -e 's/Taylor/Tailor/g;s/:/ /g'</B>

taylorj ? 1048 1375 James Tailor /users/taylorj /bin/csh

mtaylor ? 769 1375 Mary Tailor /users/mtaylor /usr/local/bin/tcsh

dataylor ? 375 518 Dave Tailor /users/dataylor /usr/local/lib/msh

taylorjr ? 203 1022 James Tailor /users/taylorjr /bin/csh

taylorrj ? 662 1042 Robert Tailor /users/taylorrj /bin/csh

taylorm ? 8692 1508 Melanie Tailor /users/taylorm /bin/csh

taylor ? 1989 1412 Dave Tailor /users/taylor /bin/csh</PRE>

<P>This last sed command can be read as &quot;each time you encounter the pattern Taylor replace it with Tailor, even if it occurs multiple times on each line. Then, each time you encounter a colon, replace it with a space.&quot;

<BR></P>

<P>Another example of using sed is to rewrite the output of the who command to be a bit more readable. Consider the results of entering who on your system:

<BR></P>

<PRE>% <B>who</B>

strawmye ttyAc   Nov 21 19:01

eiyo     ttyAd   Nov 21 17:40

tzhen    ttyAg   Nov 21 19:13

kmkernek ttyAh   Nov 17 23:22

macedot  ttyAj   Nov 21 20:41

rpm      ttyAk   Nov 21 20:40

ypchen   ttyAl   Nov 21 18:20

kodak    ttyAm   Nov 21 20:43</PRE>

<P>The output is a bit confusing; sed can help:

<BR></P>

<PRE>% <B>who | sed 's/tty/On Device /;s/Nov/Logged in November/'</B>

strawmye On Device Ac   Logged in November 21 19:01

eiyo     On Device Ad   Logged in November 21 17:40

tzhen    On Device Ag   Logged in November 21 19:13

kmkernek On Device Ah   Logged in November 17 23:22

macedot  On Device Aj   Logged in November 21 20:41

rpm      On Device Ak   Logged in November 21 20:40

ypchen   On Device Al   Logged in November 21 18:20

kodak    On Device Am   Logged in November 21 20:43</PRE>

<P>This time, each occurrence of the letters tty is replaced with the phrase On Device. Similarly, Nov is replaced with Logged in November.

<BR></P>

<P>The sed command can also be used to delete lines in the stream as it passes. The simplest version is to specify only the command:

<BR></P>

<PRE>% who | sed 'd'

%</PRE>

<P>There's no output because the command matches all lines and deletes them. Instead, to delete just the first line, simply preface the d command with that line number:

<BR></P>

<PRE>% <B>who | sed '1d'</B>

eiyo     ttyAd   Nov 21 17:40

tzhen    ttyAg   Nov 21 19:13

kmkernek ttyAh   Nov 17 23:22

macedot  ttyAj   Nov 21 20:41

rpm      ttyAk   Nov 21 20:40

ypchen   ttyAl   Nov 21 18:20

kodak    ttyAm   Nov 21 20:43</PRE>

<P>To delete more than just the one line, specify the first and last lines to delete, separating them with a comma. The following deletes the first three lines:

<BR></P>

<PRE>% <B>who | sed '1,3d'</B>

macedot  ttyAj   Nov 21 20:41

rpm      ttyAk   Nov 21 20:40

ypchen   ttyAl   Nov 21 18:20

kodak    ttyAm   Nov 21 20:43</PRE>

<P>There's more to deletion than that. You can also specify patterns by surrounding them with slashes, just the substitution pattern. To delete the entries in the who output between eiyo and rpm, the following would work:

<BR></P>

<PRE>% <B>who | head -15 | sed '/eiyo/,/rpm/d'</B>

root     console Nov  9 07:31

rick     ttyAa   Nov 21 20:58

brunnert ttyAb   Nov 21 20:56

ypchen   ttyAl   Nov 21 18:20

kodak    ttyAm   Nov 21 20:43

wh       ttyAn   Nov 21 20:33

klingham ttyAp   Nov 21 19:55

linet2   ttyAq   Nov 21 20:17

mdps     ttyAr   Nov 21 20:11</PRE>

<P>You can use patterns in combination with numbers too, so if you wanted to delete the text from the first line to the line containing kmkernek, here's how you could do it:

<BR></P>

<PRE>% <B>who | sed '1,/kmkernek/d'</B>

macedot  ttyAj   Nov 21 20:41

rpm      ttyAk   Nov 21 20:40

ypchen   ttyAl   Nov 21 18:20

kodak    ttyAm   Nov 21 20:43</PRE>

<P>Another aspect of sed is that the patterns are actually regular expressions. Don't be intimidated, though. If you understood the * and ? in filename wildcards, you've learned the key lesson of regular expressions: special characters can match zero or 
more letters in the pattern. Regular expressions are slightly different from shell patterns, because regular expressions more powerful (though more confusing). Instead of using the ? to match a character, use the . character.

<BR></P>

<P>Within this context, it's rare that you need to look for patterns sufficiently complex to require a full regular expression, which is definitely good news. The only two characters you want to remember for regular expressions are ^, which is the 
imaginary character before the first character of each line, and $, which is the character after the end of each line.

<BR></P>

<P>What does this mean? It means that you can use sed to list everyone reported by who that doesn't have s as the first letter of his or her account. You can also eliminate all blank lines from a file with sed. Return to the testme file:

<BR></P>

<PRE>% <B>cat testme</B>

Archives/               OWL/                    keylime.pie

InfoWorld/              bin/                    src/

Mail/                   bitnet.mailing-lists.Z  temp/

News/                   drop.text.hqx           testme

Archives/               OWL/                    keylime.pie

InfoWorld/              bin/                    src/

Mail/                   bitnet.mailing-lists.Z  temp/

News/                   drop.text.hqx           testme

Archives/               OWL/                    keylime.pie

InfoWorld/              bin/                    src/

Mail/                   bitnet.mailing-lists.Z  temp/

News/                   drop.text.hqx           testme</PRE>

<P>Now use sed to clean up this output.

<BR></P>

<PRE>% <B>sed '/^$/d' &lt; testme</B>

Archives/               OWL/                    keylime.pie

InfoWorld/              bin/                    src/

Mail/                   bitnet.mailing-lists.Z  temp/

News/                   drop.text.hqx           testme

Archives/               OWL/                    keylime.pie

InfoWorld/              bin/                    src/

Mail/                   bitnet.mailing-lists.Z  temp/

News/                   drop.text.hqx           testme

Archives/               OWL/                    keylime.pie

InfoWorld/              bin/                    src/

Mail/                   bitnet.mailing-lists.Z  temp/

News/                   drop.text.hqx           testme

%</PRE>

<P>These commands can be used in combination, of course; one sed command can be used to remove all blank lines, all lines that contain the word keylime, and substitute BinHex for each occurrence of hqx:

<BR></P>

<PRE>% <B>cat testme | sed '/^$/d;/keylime/d;s/hqx/BinHex/g'</B>

InfoWorld/              bin/                    src/

Mail/                   bitnet.mailing-lists.Z  temp/

News/                   drop.text.BinHex                testme

InfoWorld/              bin/                    src/

Mail/                   bitnet.mailing-lists.Z  temp/

News/                   drop.text.BinHex                testme

InfoWorld/              bin/                    src/

Mail/                   bitnet.mailing-lists.Z  temp/

News/                   drop.text.BinHex                testme

%</PRE>

<P>If you've ever spent any time on an electronic network, you've probably seen either electronic mail or articles wherein the author responds to a previous article. Most commonly, all the lines of the original message are included, each prefixed by &gt;. 

It turns out that sed is the appropriate tool either to add a prefix to a group of lines or to remove a prefix from lines in a file:

<BR></P>

<PRE>% cat &lt;&lt; EOF &gt; sample

Hey Tai! I've been looking for a music CD and none of

the shops around here have a clue about it. I was

wondering if you're going to have a chance to get into

Tower Records in the next week or so?

EOF

%

% sed 's/^/&gt; /' &lt; sample &gt; sample2

% cat sample2

&gt; Hey Tai! I've been looking for a music CD and none of

&gt; the shops around here have a clue about it. I was

&gt; wondering if you're going to have a chance to get into

&gt; Tower Records in the next week or so?

%

% cat sample2 | sed 's/^&gt; //'

Hey Tai! I've been looking for a music CD and none of

the shops around here have a clue about it. I was

wondering if you're going to have a chance to get into

Tower Records in the next week or so?

%</PRE>

<P>Recall that the caret (^) signifies the beginning of the line, so the first invocation of sed searches for the beginning of each line and replaces it with &gt;, saving the output to the file sample2. The second use of sed&#151;wherein you remove the 
prefix&#151;does the opposite search, finding all occurrences of &quot;&gt; &quot; that are at the beginning of a line and replacing them with a null pattern (which is what you have when you have two slash delimiters without anything between them).

<BR></P>

<P>I've only scratched the surface of the sed command here. It's one of those commands where the more you learn about it, the more powerful you realize it is. But, paradoxically, the more you learn about it, the more you'll really want a graphical 
interface to simplify your life.

<BR></P>

<HR ALIGN=CENTER>

<NOTE>

<IMG SRC="note.gif" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/note.gif" WIDTH = 35 HEIGHT = 35><B>NOTE:</B> The only sed command I use is substitution. I figure that matching patterns is best done with grep, and it's very rare that I need to delete specific lines from a file anyway. One helpful tip is that 

sed can be used to delete from the first line of a file to a specified pattern, meaning that it can easily be used to strip headers from an electronic mail message. Specify the pattern 1,/^$/d. 

<BR></NOTE>

<HR ALIGN=CENTER>

<P><A HREF="unx06.htm" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/unx06.htm"><IMG SRC="bluprev.gif" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/bluprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="index.htm" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/index.htm"><IMG SRC="blutoc.gif" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/blutoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="unx08.htm" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/unx08.htm"><IMG SRC="blunext.gif" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/blunext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>

<A HREF="index.htm" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/index.htm"><IMG SRC="bluprev.gif" tppabs="http://www.mcp.com/814665600/0-672/0-672-30402-3/bluprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Home"></A>

</P></BODY></HTML>

